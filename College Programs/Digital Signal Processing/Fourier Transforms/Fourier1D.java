/*
 * Convolution1D.java
 *
 * Created on February 20, 2001, 2:00 PM
 */
 
import jigl.signal.*;
import jigl.signal.io.*;
import javax.swing.*;
import java.io.*;
import jigl.signal.ops.levelOps.*;
import jigl.signal.ops.*;
import jigl.signal.utils.*;
import java.lang.Math;
import jigl.math.Complex;
/** 
 *
 * @author  bhinton
 * @version 
 */
public class Fourier1D extends javax.swing.JFrame {

  float[] testInput = {0,1,2,3,5,6,7,8,9};
  float[] testImpulse = {1,2,3};
  /** Creates new form Convolution1D */
  public Fourier1D() {
    initComponents ();
  }
     
  private Signal readFromFile(String filename) {
      Signal input;
      try {
        SignalInputStream is = new SignalInputStream(filename);
        input = is.read();
        is.close();
        return input;
      }
      catch (Exception e) {
          JOptionPane.showMessageDialog(null, e.getMessage());
        return null;
      }
  }
  private Signal readFromFile() {
      Signal input;
      String filename = ImageFileBrowse();
      try {
        SignalInputStream is = new SignalInputStream(filename);
        input = is.read();
        is.close();
        return input;
      }
      catch (Exception e) {
          JOptionPane.showMessageDialog(null, e.getMessage());
        return null;
      }
  }
   private void writeToFile(Signal mySignal, String filename) {
      try {
        SignalOutputStream ios = new SignalOutputStream(filename);
        ios.write(mySignal);
        ios.close();
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
      
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
      jPanel1 = new javax.swing.JPanel();
      jPanel3 = new javax.swing.JPanel();
      jPanel4 = new javax.swing.JPanel();
      jButton1 = new javax.swing.JButton();
      getContentPane().setLayout(new java.awt.GridBagLayout());
      java.awt.GridBagConstraints gridBagConstraints1;
      addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
              exitForm(evt);
          }
      }
      );
      
      jPanel1.setLayout(new java.awt.GridLayout(1, 1));
      jPanel1.setPreferredSize(new java.awt.Dimension(172, 463));
      jPanel1.setBorder(new javax.swing.border.TitledBorder("Input Signal Border"));
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 0;
      gridBagConstraints1.gridy = 0;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 80.0;
      getContentPane().add(jPanel1, gridBagConstraints1);
      
      
      jPanel3.setLayout(new java.awt.GridLayout(1, 1));
      jPanel3.setPreferredSize(new java.awt.Dimension(172, 463));
      jPanel3.setBorder(new javax.swing.border.TitledBorder("Impulse Signal"));
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 1;
      gridBagConstraints1.gridy = 0;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 80.0;
      getContentPane().add(jPanel3, gridBagConstraints1);
      
      
      jPanel4.setLayout(new java.awt.GridLayout(1, 1));
      jPanel4.setPreferredSize(new java.awt.Dimension(172, 463));
      jPanel4.setBorder(new javax.swing.border.TitledBorder("Output Signal Border"));
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 2;
      gridBagConstraints1.gridy = 0;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 80.0;
      getContentPane().add(jPanel4, gridBagConstraints1);
      
      
      jButton1.setText("Load Input");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              jButton1ActionPerformed(evt);
          }
      }
      );
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 0;
      gridBagConstraints1.gridy = 1;
      gridBagConstraints1.gridwidth = 3;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 15.0;
      getContentPane().add(jButton1, gridBagConstraints1);
      
      pack();
      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      java.awt.Dimension dialogSize = getSize();
      setSize(new java.awt.Dimension(700, 700));
      setLocation((screenSize.width-700)/2,(screenSize.height-700)/2);
  }//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        outputs(generateCosine(8, 128).add(generateSine(8, 128)), "add");
        
  }//GEN-LAST:event_jButton1ActionPerformed

  private void outputs(RealSignal in, String o) {
    ComplexSignal c;
    FFT op = new FFT();
    c = op.doFFT(in, true);
    try {
        writeToFile(in, "c:\\bryan\\programs\\java\\fourier transforms\\" + o + ".dat");
        writeToFile(c.real(), "c:\\bryan\\programs\\java\\fourier transforms\\real" + o + ".dat");
        writeToFile(c.imag(), "c:\\bryan\\programs\\java\\fourier transforms\\imag" + o + ".dat");
        writeToFile(computeMag(c),"c:\\bryan\\programs\\java\\fourier transforms\\Mag" + o + ".dat");
        writeToFile(computePhase(c),"c:\\bryan\\programs\\java\\fourier transforms\\Phase" + o + ".dat");
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
      
  }
  private RealSignal computeMag(ComplexSignal c) {
     double val=0;
    RealSignal out = new RealSignal(c.length());
    RealSignal sigReal = c.real();
    RealSignal sigImage = c.imag();
    for (int i=0; i<sigReal.length(); i++) {
        val = Math.pow(sigReal.get(i),2.0) + Math.pow(sigImage.get(i),2.0);
        val = Math.sqrt(val);
        out.set(i, (float) val);
    }
    return out;
  }
   private RealSignal computePhase(ComplexSignal c) {
     double val=0;
    RealSignal out = new RealSignal(c.length());
    RealSignal sigReal = c.real();
    RealSignal sigImage = c.imag();
    for (int i=0; i<sigReal.length(); i++) {
        val = Math.atan2(sigImage.get(i), sigReal.get(i));
        out.set(i, (float) val);
    }
    return out;
  }
  private RealSignal computePowerSpectrum(RealSignal sigReal, RealSignal sigImag) {
     double val=0;
    RealSignal out = new RealSignal(sigReal.length());
    for (int i=0; i<sigReal.length(); i++) {
        val = Math.pow(sigReal.get(i),2.0) + Math.pow(sigImag.get(i),2.0);
        out.set(i, (float) val);
    }
    return out;
  }
  private RealSignal discoverTransfer(ComplexSignal cg1, ComplexSignal cg2) {
    RealSignal r=null;
    ComplexSignal cgout = new ComplexSignal(cg1.length());
    float valReal=0;
    float valImag=0;
    try {
        for (int i=0;i<cg1.length(); i++) {
            if (cg1.getReal(i) == 0) valReal=0;
            else valReal = (cg2.getReal(i)/cg1.getReal(i));
            if (cg1.getImag(i) == 0) valImag=0;
            else valImag = (cg2.getImag(i)/cg1.getImag(i));
            cgout.set(i, valReal, valImag);
        }
        r = (performInverseTransform(cgout)).real();
        writeToFile(r, "c:\\bryan\\programs\\java\\fourier transforms\\impulse.dat");
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
        r = null;
    }
    return r;
  }
  private void impulseVerify() {
      RealSignal out,rg1, rg2;
      String file = ImageFileBrowse();
      rg1 = (RealSignal) readFromFile(file);
      file = ImageFileBrowse();
      rg2 = (RealSignal) readFromFile(file);
      try {
        SignalKernel k = new SignalKernel(rg2);
        Convolve c = new Convolve(k);
        out = (RealSignal) c.apply(rg1);
        writeToFile(out, "c:\\bryan\\programs\\java\\fourier transforms\\impulseverify.dat");
      }
      catch (Exception e) {
            
      }
  }
  private ComplexSignal performInverseTransform(ComplexSignal csg) {
    FFT op = new FFT();
    try {
        return op.doFFT(csg, false);
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    return null;
  }
  private ComplexSignal performTransform() {
    ComplexSignal out;
    RealSignal r;
    String file = ImageFileBrowse();
    r = (RealSignal) readFromFile(file);
    FFT op = new FFT();
    try {
        out = op.doFFT(r,true);
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
        return null;
    }
    return out;
  }
  private void proveConvolution() {
    RealSignal kern, mainSig, outReal;
    ComplexSignal ckern, cMainSig, out;
    kern = (RealSignal) readFromFile();
    mainSig = (RealSignal) readFromFile();
    try {
        SignalKernel k = new SignalKernel(kern);
        Convolve c = new Convolve(k);
        writeToFile(c.apply(mainSig), "c:\\bryan\\programs\\java\\fourier transforms\\Dconvolve.dat");
        FFT op = new FFT();
        ckern = op.doFFT(kern, true);
        cMainSig = op.doFFT(mainSig, true);
        cMainSig.multiply(ckern);
        out = op.doFFT(cMainSig, false);
        outReal = out.real();
        writeToFile((RealSignal) (new Shift(outReal.length()/2, Shift.WRAP)).apply(outReal),"c:\\bryan\\programs\\java\\fourier transforms\\Dinverse.dat");
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
      
  }
  private RealSignal generateSine(int freq, int length) {
    RealSignal val = new RealSignal(length);
    double calc = 0;
    for (int i=0; i<length; i++) {
        calc =  Math.sin(2 * Math.PI * freq * (((double)i)/((double)length)));
        val.set(i, (float)calc);
    }
    return val;
  }
  private RealSignal generateCosine(int freq, int length) {
    RealSignal val = new RealSignal(length);
    double calc = 0;
    for (int i=0; i<length; i++) {
        calc =  Math.cos(2 * Math.PI * freq * (((double)i)/((double)length)));
        val.set(i, (float) calc);
    }
    return val;
  }
  private String ImageFileBrowse() {
       File file;
      String name;
      JFileChooser selectFile = new JFileChooser();
      selectFile.showDialog(this, "Select File");
      file = selectFile.getSelectedFile();
      if (file != null) {
          return file.getAbsolutePath();
      }
      return "";
  }
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    System.exit (0);
  }//GEN-LAST:event_exitForm

  /**
  * @param args the command line arguments
  */
  public static void main (String args[]) {
    new Fourier1D ().show ();
  }

  private jigl.gui.SignalCanvas signalCanvas1;
  private jigl.gui.SignalCanvas signalCanvas2;
  private jigl.gui.SignalCanvas signalCanvas3;

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JButton jButton1;
  // End of variables declaration//GEN-END:variables

}