/*
 * Convolution1D.java
 *
 * Created on February 20, 2001, 2:00 PM
 */
 
import javax.swing.*;
import java.io.*;
import java.util.Date;
import jigl.image.*;
import jigl.image.utils.*;
import jigl.image.io.*;
import jigl.image.ops.*;
import jigl.gui.*;
/** 
 *
 * @author  bhinton
 * @version 
 */
public class Sampling extends javax.swing.JFrame {
 
    ImageCanvas ic;
    ImageCanvas ic2;
   /** Creates new form Convolution1D */
  public Sampling() {
      initComponents();
    jPanel2.add(ic = new ImageCanvas());
    jPanel2.add(ic2 = new ImageCanvas());
  }
     
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      miView = new javax.swing.JMenuItem();
      jPanel2 = new javax.swing.JPanel();
      
      jMenu1.setText("Tools");
        
        miView.setText("View");
          miView.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  miViewActionPerformed(evt);
              }
          }
          );
          jMenu1.add(miView);
          jMenuBar1.add(jMenu1);
        getContentPane().setLayout(new java.awt.GridBagLayout());
      java.awt.GridBagConstraints gridBagConstraints1;
      addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
              exitForm(evt);
          }
      }
      );
      
      jPanel2.setLayout(new java.awt.GridLayout(1, 2));
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 2;
      gridBagConstraints1.gridy = 1;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 1.0;
      getContentPane().add(jPanel2, gridBagConstraints1);
      
      setJMenuBar(jMenuBar1);
      
      pack();
      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      java.awt.Dimension dialogSize = getSize();
      setSize(new java.awt.Dimension(700, 700));
      setLocation((screenSize.width-700)/2,(screenSize.height-700)/2);
  }//GEN-END:initComponents

  private void miViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miViewActionPerformed
    String input;
    float in;
    ComplexImage gaus, imageFFT;
    RealGrayImage newImage;
    FFT f = new FFT();
    RealGrayImage r = readFromFile();
    try {
        Convolve c = new Convolve(new ImageKernel(ImageKernel.UNIFORM));
        c.apply(r);
        ic.setImage(r);
        JOptionPane.showMessageDialog(null, r.X() + ", " + r.Y());
        input = JOptionPane.showInputDialog("Specify float");
        in = Float.valueOf(input).floatValue();
        in = (float) (((float)1)/(float)(in));
        gaus = ImageGenerator.buildGaussInFreqDomain(in, r.X(), r.Y(), 0,0, false);
        imageFFT = f.forward(r);
        imageFFT.divide(gaus);
        newImage = ImageConverter.toRealGray(f.reverse(imageFFT));
        newImage.add(255);
        ic2.setImage(newImage);
        ic2.repaint();
        ic.repaint();
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
  }//GEN-LAST:event_miViewActionPerformed
    private String ImageFileBrowse() {
       File file;
      String name;
      JFileChooser selectFile = new JFileChooser();
      selectFile.setCurrentDirectory(new File("c:\\bryan\\programs\\java\\Sampling"));
      selectFile.showDialog(this, "Select File");
      file = selectFile.getSelectedFile();
      if (file != null) {
          return file.getAbsolutePath();
      }
      return "";
    }
  private RealGrayImage readFromFile() {
      RealGrayImage in;
      Image im;
      ImageConverter ic;
      try {
        ImageInputStream is = new ImageInputStream(ImageFileBrowse());
        im = is.read();
        ic = new ImageConverter();
        in = ic.toRealGray(im);
        is.close();
        return in;
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());  
        return null;
      }
  }
private void writeToFile(RealGrayImage image, String filename) {
      try {
        ImageOutputStream ios = new ImageOutputStream(filename);
        ios.write(new ImageConverter().toGray(image));
        ios.close();
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
      
  }
 
  private RealGrayImage sample(RealGrayImage data, int sampleRate) {
      RealGrayImage newImage = new RealGrayImage(data.X()/sampleRate, data.Y()/sampleRate);
      Convolve c = new Convolve(new ImageKernel(1,8));
      int i, j;
      try {   
          ic.setImage(data);
          data = (RealGrayImage) c.apply(data);
           i = j = 0;
            for (i = 0; i < (data.X()/sampleRate); i++) {
                for (j = 0; j <(data.Y()/sampleRate); j++) {
                    newImage.set(i, j, data.get(i*sampleRate, j*sampleRate));
                }
            }
           ic2.setImage(newImage);
      }
      catch (Exception e) {
             JOptionPane.showMessageDialog(null, e.getMessage());
      }
      return newImage;
  }
 
 
  private void writeToTextFile(String filename, String[] text) {
      try {
        RandomAccessFile rw = new RandomAccessFile(filename, "rw");
        for (int i=0; i < text.length; i++) {
            if (text[i] != null)
            rw.writeChars(text[i] + "\r\n");
        }
        rw.close();
      }
      catch (Exception e) {
          JOptionPane.showMessageDialog(null, e.getMessage());
      }
  }
   private RealGrayImage filter(RealGrayImage data) {
    ComplexImage c;
    RealGrayImage before, out, phase;
    int x, y;
    double average, difference, temp;
    x = y = 0;
    temp =  average = difference =0;
    FFT f= new FFT();
    c = f.forward(Pad(data, 0, 0));
    before = c.getMagnitudeImage();
    for (int i=0; i<(before.X()/2); i++) {
        for (int j=0; j<(before.Y()); j++) {
            if (j != 0 || x != 0) {
                temp = getAverage(before, i, j);
                if (Math.abs((before.get(i, j) - temp)) > difference) {
                    average = temp;
                    difference = Math.abs((before.get(i, j) - temp));
                    x = i;
                    y = j;
                }
            }
        }
    }
    
    phase = new PhaseImage(c);
    c.setImag(x, y, (float) (average * Math.sin(phase.get(x, y))));
    c.setReal(x, y, (float) (average * Math.cos(phase.get(x, y))));
    average = getAverage(before, before.X() - x, before.Y() -y);
    c.setImag(before.X() - x, before.Y() - y, (float) (average * Math.sin(phase.get(x, y))));
    c.setReal(before.X() - x, before.Y() - y, (float) (average * Math.cos(phase.get(x, y))));
    
    out = ImageConverter.toRealGray(f.reverse(c));
    out.byteSize();
    return out;
    //writeToFile(out, "c:\\bryan\\programs\\java\\Image Filtering\\output\\filtered.pgm");
    
   
  }
  private double getAverage(RealGrayImage data, int x, int y) {
    int average = 0;
    int numpoints = 0;
    
    if (x == 0) {
        if ((y-1) == 0) {
            average += data.get(x, y+1);
            average += data.get(x+1, y+1);
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            return ((double) ((double) average) / ((double) 4));
        }
        else if (y == (data.Y()-1)) {
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            average += data.get(x, y-1);
            return ((double) ((double) average) / ((double) 3));
        }
        else {
            average += data.get(x, y-1);
            average += data.get(x, y+1);
            average += data.get(x+1, y+1);
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            return ((double) ((double) average) / ((double) 5));
        }
    }
    else if (y == 0) {
        if ((x-1) == 0) {
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            return ((double) ((double) average) / ((double) 4));
        }
        else if (x == ((data.X()/2)-1)) {
            average += data.get(x-1, y);
            average += data.get(x-1, y+1);
            average += data.get(x, y+1);
            return ((double) ((double) average) / ((double) 3));
        }
        else {
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            average += data.get(x-1, y);
            return ((double) ((double) average) / ((double) 5));
        }
    }
    else if ((x == ((data.X()/2)-1)) &&  (y == (data.Y()-1))) { 
            average += data.get(x, y-1);
            average += data.get(x-1, y);
            average += data.get(x-1, y-1);
            return ((double) ((double) average) / ((double) 3));
    }
    else if (x == ((data.X()/2)-1)) {
            average += data.get(x, y-1);
            average += data.get(x-1, y-1);
            average += data.get(x-1, y);
            average += data.get(x-1, y+1);
            average += data.get(x, y+1);
            return ((double) ((double) average) / ((double) 5));
    }
    else if (y == (data.Y()-1)) {
            average += data.get(x-1, y);
            average += data.get(x-1, y-1);
            average += data.get(x, y-1);
            average += data.get(x+1, y-1);
            average += data.get(x+1, y);
            return ((double) ((double) average) / ((double) 5));
    }
    else {
            average += data.get(x-1, y-1);
            average += data.get(x, y-1);
            average += data.get(x+1, y-1);
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            average += data.get(x-1, y);
            return ((double) ((double) average) / ((double) 8));
    }
      
  }
  private RealGrayImage Pad(RealGrayImage data, int size, int oldsize) {
    int x,newx, y,newy,i;
    RealGrayImage retVal;
    x = data.X();
    y = data.Y();
    if (size==0) {
        for (i=0; x>Math.pow(2, i);i++) {}
        newx = (int) Math.pow(2, i);
        for (i=0; y>Math.pow(2, i);i++) {}
        newy= (int) Math.pow(2, i);
    }
    else {
        newx = size;
        newy = size;
        x = oldsize;
        y = oldsize;
    }
    retVal = data.addbuffer(newx, newy, newx-x, newy-y, 0);
    return retVal;
  }
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    System.exit (0);
  }//GEN-LAST:event_exitForm
 
  
  /**
  * @param args the command line arguments
  */
  public static void main (String args[]) {
    Sampling c = new Sampling ();
    
    //c.writeToFile(c.sample(c.readFromFile(), 8), "c:\\bryan\\programs\\java\\Sampling\\output.pgm");
    c.show();
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuItem miView;
  private javax.swing.JPanel jPanel2;
  // End of variables declaration//GEN-END:variables

}