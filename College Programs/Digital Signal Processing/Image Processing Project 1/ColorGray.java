/*
 * ColorGray.java
 *
 * Created on January 22, 2001, 10:35 PM
 */


/**
 *
 * @author  Bryan
 * @version 
 */
import jigl.image.io.*;
import jigl.image.*;
import jigl.gui.*;
import jigl.signal.*;
import jigl.signal.io.*;
import javax.swing.*;
import java.awt.*;
import jigl.signal.ops.*;
public class ColorGray extends javax.swing.JFrame {

    

    private ColorImage realImage;
    private GrayImage  grayImage;
    private JImageCanvas canvas1;
    private JImageCanvas canvas2;
    private SignalCanvas sgCanvas;
    private Histogram hgImage;
    private RealSignal rsSignal;
    /** Creates new form ColorGray */
    public ColorGray() {
        initComponents ();
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        cmdInitiate = new javax.swing.JButton();
        cmdHistogram = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        setTitle("CS450 Imaging Project #1");
        setForeground(java.awt.Color.white);
        setBackground(java.awt.Color.white);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        }
        );
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );
        
        jLabel2.setBorder(new javax.swing.border.BevelBorder(1, java.awt.Color.white, java.awt.Color.white, java.awt.Color.darkGray,
        java.awt.Color.black));
        jLabel2.setText("CS450 Imaging Project #1");
        jLabel2.setForeground(java.awt.Color.black);
        jLabel2.setBackground(new java.awt.Color (204, 204, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setFont(new java.awt.Font ("Garamond", 0, 36));
        jLabel2.setOpaque(true);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        
        getContentPane().add(jLabel2, java.awt.BorderLayout.NORTH);
        
        
        jPanel1.setLayout(new java.awt.GridLayout(1, 1));
        jPanel1.setBorder(new javax.swing.border.TitledBorder("Color Image"));
        jPanel1.setBackground(java.awt.Color.lightGray);
        jPanel1.setOpaque(false);
        
        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);
        
        
        jPanel2.setLayout(new java.awt.GridLayout(1, 1));
        jPanel2.setBorder(new javax.swing.border.TitledBorder("Gray Image"));
        jPanel2.setOpaque(false);
        
        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);
        
        
        jPanel4.setLayout(new java.awt.GridLayout(2, 1));
        
        cmdInitiate.setBorder(new javax.swing.border.BevelBorder(0));
          cmdInitiate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
          cmdInitiate.setName("cmdIntiatiate");
          cmdInitiate.setFont(new java.awt.Font ("Garamond", 1, 36));
          cmdInitiate.setText("Generate Gray Image");
          cmdInitiate.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  cmdInitiateActionPerformed(evt);
              }
          }
          );
          jPanel4.add(cmdInitiate);
          
          
        cmdHistogram.setBorder(new javax.swing.border.BevelBorder(0));
          cmdHistogram.setFont(new java.awt.Font ("Garamond", 1, 36));
          cmdHistogram.setText("Generate Histogram");
          cmdHistogram.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  cmdHistogramActionPerformed(evt);
              }
          }
          );
          jPanel4.add(cmdHistogram);
          
          
        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);
        
        
        jScrollPane2.setViewportBorder(new javax.swing.border.TitledBorder("Histogram"));
        jScrollPane2.setAutoscrolls(true);
        
        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setSize(new java.awt.Dimension(976, 450));
        setLocation((screenSize.width-976)/2,(screenSize.height-450)/2);
    }//GEN-END:initComponents

  private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    this.setTitle("CS450 Imaging Project #1 - Form size X=" + this.getWidth() + ", Y=" + this.getHeight());
  }//GEN-LAST:event_formComponentResized

  private void cmdInitiateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInitiateActionPerformed
    int i, j;
    int pixel[];
    int pixelvalue;
    grayImage = new GrayImage(realImage.X(), realImage.Y());
    for (i=0; i < realImage.Y(); i++) {
        for (j=0; j< realImage.X(); j++) {
            pixel = realImage.get(j, i);
            pixelvalue = (int) (pixel[0] * .299 + .587 * pixel[1] + .114 * pixel[2]);
            grayImage.set(j, i, pixelvalue);
        }
    }
    try {
        //jPanel2.remove(canvas2);
        if (canvas2 == null) {    
            jPanel2.add(canvas2 = new JImageCanvas(grayImage));
            this.repaint();
            this.pack();
        }
        else {
            canvas2.setImage(grayImage);
            this.repaint();
            this.pack();
            
        }
    }
    catch (Exception e) {}
    JOptionPane.showMessageDialog(null, "Image created and should be displaying");
  }//GEN-LAST:event_cmdInitiateActionPerformed

  private void cmdHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdHistogramActionPerformed
      int maxcount = 0;
      try {
            hgImage = new Histogram(grayImage, 1);
            rsSignal = hgImage.toSignal();
            if (sgCanvas == null) {
                sgCanvas = new SignalCanvas(rsSignal);
                //jPanel3.add(sgCanvas);
            }
            else {
                sgCanvas.setSignal(rsSignal);
            }
            
      }
      catch (Exception e) {}
      this.repaint();
      this.pack();
      
      for (int i=(int)hgImage.min(); i<=(int)hgImage.max();i++) {
          if (hgImage.count(i) > maxcount) {
            maxcount = hgImage.count(i);
          }
      }
      //JLabel testLabel = new JLabel("The is a test");
      //testLabel.setPreferredSize(new Dimension(1000, 1000));
      //jPanel3.add(testLabel);
      JOptionPane.showMessageDialog(null, "Histogram created and should be displaying");
      JOptionPane.showMessageDialog(null, "The highest count in the histogram is " + maxcount);
      //jScrollPane2.setViewportView(sgCanvas);
      sgCanvas.setSize(new Dimension((int)(hgImage.max()) + 50,maxcount+500));
      //jPanel3.setPreferredSize(jPanel2.getSize());
      jScrollPane2.setPreferredSize(jPanel2.getSize());
      //jPanel3.revalidate();
      jScrollPane2.add(sgCanvas);
      jScrollPane2.repaint();
      writeToFile(rsSignal);
      writeToFile(grayImage);
  }//GEN-LAST:event_cmdHistogramActionPerformed

  private void writeToFile(Signal mySignal) {
      try {
    SignalOutputStream ios = new SignalOutputStream("C:\\histogram.dat");
    ios.write(mySignal);
    ios.close();
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
      
  }
  
  private void writeToFile(GrayImage myImage) {
      try {
    ImageOutputStream ios = new ImageOutputStream("C:\\parrots.pgm");
    ios.write(myImage);
    ios.close();
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
      
  }
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main (String args[]) {
        ColorGray cg = new ColorGray ();
        //Load Image
        
        try {
        ImageInputStream ins = new ImageInputStream("c:\\parrots.ppm");
        cg.realImage = (ColorImage) ins.read();
        ins.close();
        cg.jPanel1.add(cg.canvas1 = new JImageCanvas(cg.realImage));
        }
        catch (Exception e) {
            if (e.getMessage() != null && e.getMessage().equals("") == false) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
         }
        cg.jScrollPane2.getViewport().setBackground(Color.white);    
        cg.show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton cmdInitiate;
    private javax.swing.JButton cmdHistogram;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
