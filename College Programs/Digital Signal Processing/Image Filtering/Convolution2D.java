/*
 * Convolution1D.java
 *
 * Created on February 20, 2001, 2:00 PM
 */
 
import javax.swing.*;
import java.io.*;
import java.util.Date;
import jigl.image.*;
import jigl.image.utils.*;
import jigl.image.io.*;
import jigl.image.ops.*;
/** 
 *
 * @author  bhinton
 * @version 
 */
public class Convolution2D extends javax.swing.JFrame {

  RealGrayImage input, impulse;
  RealGrayImage output;
  String textOutput[];
  float kern[][] = {{1,1,1},{1,8,1},{1,1,1}};
  float dataArray[][] = {{0,1,2,3,5},{1,2,3,5,7},{2,3,5,7,8},{3,5,7,8,9},{5,7,8,9,10}};
  /** Creates new form Convolution1D */
  public Convolution2D() {
    textOutput = new String[2];
  }
     
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
      jPanel2 = new javax.swing.JPanel();
      getContentPane().setLayout(new java.awt.GridBagLayout());
      java.awt.GridBagConstraints gridBagConstraints1;
      addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
              exitForm(evt);
          }
      }
      );
      
      jPanel2.setLayout(new java.awt.GridLayout(1, 1));
      
      gridBagConstraints1 = new java.awt.GridBagConstraints();
      gridBagConstraints1.gridx = 2;
      gridBagConstraints1.gridy = 1;
      gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
      gridBagConstraints1.weightx = 1.0;
      gridBagConstraints1.weighty = 1.0;
      getContentPane().add(jPanel2, gridBagConstraints1);
      
      pack();
      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      java.awt.Dimension dialogSize = getSize();
      setSize(new java.awt.Dimension(700, 700));
      setLocation((screenSize.width-700)/2,(screenSize.height-700)/2);
  }//GEN-END:initComponents
private RealGrayImage readFromFile(String filename) {
      RealGrayImage in;
      Image im;
      ImageConverter ic;
      try {
        ImageInputStream is = new ImageInputStream(filename);
        im = is.read();
        ic = new ImageConverter();
        in = ic.toRealGray(im);
        is.close();
        return in;
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());  
        return null;
      }
  }
private void writeToFile(RealGrayImage image, String filename) {
      try {
        ImageOutputStream ios = new ImageOutputStream(filename);
        ios.write(new ImageConverter().toGray(image));
        ios.close();
      }
      catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }
      
  }
 
  private void filter(RealGrayImage data) {
    ComplexImage c;
    RealGrayImage before, out, phase;
    int x, y;
    double average, difference, temp;
    x = y = 0;
    temp =  average = difference =0;
    FFT f= new FFT();
    c = f.forward(Pad(data, 0, 0));
    before = c.getMagnitudeImage();
    for (int i=0; i<(before.X()/2); i++) {
        for (int j=0; j<(before.Y()); j++) {
            if (j != 0 || x != 0) {
                temp = getAverage(before, i, j);
                if (Math.abs((before.get(i, j) - temp)) > difference) {
                    average = temp;
                    difference = Math.abs((before.get(i, j) - temp));
                    x = i;
                    y = j;
                }
            }
        }
    }
    
    phase = new PhaseImage(c);
    c.setImag(x, y, (float) (average * Math.sin(phase.get(x, y))));
    c.setReal(x, y, (float) (average * Math.cos(phase.get(x, y))));
    average = getAverage(before, before.X() - x, before.Y() -y);
    c.setImag(before.X() - x, before.Y() - y, (float) (average * Math.sin(phase.get(x, y))));
    c.setReal(before.X() - x, before.Y() - y, (float) (average * Math.cos(phase.get(x, y))));
    
    out = ImageConverter.toRealGray(f.reverse(c));
    out.byteSize();
    writeToFile(out, "c:\\bryan\\programs\\java\\Image Filtering\\output\\filtered.pgm");
   
  }
  private double getAverage(RealGrayImage data, int x, int y) {
    int average = 0;
    int numpoints = 0;
    
    if (x == 0) {
        if ((y-1) == 0) {
            average += data.get(x, y+1);
            average += data.get(x+1, y+1);
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            return ((double) ((double) average) / ((double) 4));
        }
        else if (y == (data.Y()-1)) {
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            average += data.get(x, y-1);
            return ((double) ((double) average) / ((double) 3));
        }
        else {
            average += data.get(x, y-1);
            average += data.get(x, y+1);
            average += data.get(x+1, y+1);
            average += data.get(x+1, y);
            average += data.get(x+1, y-1);
            return ((double) ((double) average) / ((double) 5));
        }
    }
    else if (y == 0) {
        if ((x-1) == 0) {
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            return ((double) ((double) average) / ((double) 4));
        }
        else if (x == ((data.X()/2)-1)) {
            average += data.get(x-1, y);
            average += data.get(x-1, y+1);
            average += data.get(x, y+1);
            return ((double) ((double) average) / ((double) 3));
        }
        else {
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            average += data.get(x-1, y);
            return ((double) ((double) average) / ((double) 5));
        }
    }
    else if ((x == ((data.X()/2)-1)) &&  (y == (data.Y()-1))) { 
            average += data.get(x, y-1);
            average += data.get(x-1, y);
            average += data.get(x-1, y-1);
            return ((double) ((double) average) / ((double) 3));
    }
    else if (x == ((data.X()/2)-1)) {
            average += data.get(x, y-1);
            average += data.get(x-1, y-1);
            average += data.get(x-1, y);
            average += data.get(x-1, y+1);
            average += data.get(x, y+1);
            return ((double) ((double) average) / ((double) 5));
    }
    else if (y == (data.Y()-1)) {
            average += data.get(x-1, y);
            average += data.get(x-1, y-1);
            average += data.get(x, y-1);
            average += data.get(x+1, y-1);
            average += data.get(x+1, y);
            return ((double) ((double) average) / ((double) 5));
    }
    else {
            average += data.get(x-1, y-1);
            average += data.get(x, y-1);
            average += data.get(x+1, y-1);
            average += data.get(x+1, y);
            average += data.get(x+1, y+1);
            average += data.get(x, y+1);
            average += data.get(x-1, y+1);
            average += data.get(x-1, y);
            return ((double) ((double) average) / ((double) 8));
    }
      
  }
  private RealGrayImage Pad(RealGrayImage data, int size, int oldsize) {
    int x,newx, y,newy,i;
    RealGrayImage retVal;
    x = data.X();
    y = data.Y();
    if (size==0) {
        for (i=0; x>Math.pow(2, i);i++) {}
        newx = (int) Math.pow(2, i);
        for (i=0; y>Math.pow(2, i);i++) {}
        newy= (int) Math.pow(2, i);
    }
    else {
        newx = size;
        newy = size;
        x = oldsize;
        y = oldsize;
    }
    retVal = data.addbuffer(newx, newy, newx-x, newy-y, 0);
    return retVal;
  }
  private RealGrayImage performConvolutionByFFT(RealGrayImage in,RealGrayImage im, String data) {
     ComplexImage out = null;
     RealGrayImage rout=null;
    Convolve c = null;
    Date start;
    Date stop;
    try {
        
        if (data.equals("X")) {  
             im = new ImageKernel(ImageKernel.SOBEL_X);
        }
        else if (data.equals("Y")) {
            im = new ImageKernel(ImageKernel.SOBEL_Y);
        }
        FFT f = new FFT();
        in = Pad(in, 0, 0);
        im = Pad(im, in.X(), im.X());
        System.out.println("Starting Convolution");
        start = new java.util.Date();
        out = f.forward(in);
        out.multiply(f.forward(im));
        rout = ImageConverter.toRealGray(f.reverse(out));
        rout.byteSize();
         stop  = new java.util.Date();
         System.out.println("Stopping Convolution");
         textOutput[0] = String.valueOf(stop.toString());
         textOutput[1] = String.valueOf(start.toString());
         System.out.println("Time Stop was " + textOutput[0]);
         System.out.println("Time Start was " + textOutput[1]);
         
    }
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    
    return rout;
  }
  private void writeToTextFile(String filename, String[] text) {
      try {
        RandomAccessFile rw = new RandomAccessFile(filename, "rw");
        for (int i=0; i < text.length; i++) {
            if (text[i] != null)
            rw.writeChars(text[i] + "\r\n");
        }
        rw.close();
      }
      catch (Exception e) {
          JOptionPane.showMessageDialog(null, e.getMessage());
      }
  }
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    System.exit (0);
  }//GEN-LAST:event_exitForm
  public void parta() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    impulse = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    output = performConvolutionByFFT(input, impulse, "");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outputa.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outputa.txt", textOutput);
  }
  public void partb() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    impulse = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_Gaussian.pgm");
    output = performConvolutionByFFT(input, impulse, "");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outputb.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outputb.txt", textOutput);
  }
  public void partc1() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    output = performConvolutionByFFT(input, impulse, "X");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outputcx.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outputcx.txt", textOutput);
  }
  public void partc2() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    output = performConvolutionByFFT(input,impulse, "Y");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outputcy.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outputcy.txt", textOutput);
  }
  public void partd() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_White_Box.pgm");
    impulse = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_Noise.pgm");
    output = performConvolutionByFFT(input, impulse, "");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outputd.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outputd.txt", textOutput);
  }
  public void parte() {
    input = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_Gaussian.pgm");
    impulse = readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\2D_Noise.pgm");
    output = performConvolutionByFFT(input,impulse, "");
    writeToFile(output, "c:\\bryan\\programs\\java\\Image Filtering\\output\\outpute.pgm");
    writeToTextFile("c:\\bryan\\programs\\java\\Image Filtering\\output\\outpute.txt", textOutput);
  }
  
  /**
  * @param args the command line arguments
  */
  public static void main (String args[]) {
    Convolution2D c = new Convolution2D ();
    //c.parta();
    //c.partb();
    //c.partc1();
    //c.partc2();
    //c.partd();
    //c.parte();
    c.filter(c.readFromFile("c:\\bryan\\programs\\java\\Image Filtering\\interfere.pgm"));
    System.exit(0);
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel2;
  // End of variables declaration//GEN-END:variables

}