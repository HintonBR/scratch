/*
 * GameView.java
 *
 * Created on February 3, 2001, 12:40 PM
 */


/**
 *
 * @author  Bryan
 * @version 
 */
import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.beans.*;
import java.util.*;
public class GameView extends javax.swing.JFrame {

    private PropertyChangeListener pcl;
    private GameModel gm;
    private Vector views;
    private PlayView blue = null;
    private PlayView red = null;
    private Vector characterList;
    private Vector spaceList;
    private int newCharacterCount = 1;
    private int newSpaceCount = 1;
   
    /** Creates new form GameView */
    public GameView() {
        characterList = new Vector();
        spaceList = new Vector();
        views = new Vector();
        initComponents ();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-600)/2,(screenSize.height-47)/10);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        openGameMenuItem = new javax.swing.JMenuItem();
        playGameMenuItem = new javax.swing.JMenuItem();
        saveGameMenuItem = new javax.swing.JMenuItem();
        terminateMenuItem = new javax.swing.JMenuItem();
        characterMenu = new javax.swing.JMenu();
        newCharacterMenuItem = new javax.swing.JMenuItem();
        spaceMenu = new javax.swing.JMenu();
        newSpaceMenuItem = new javax.swing.JMenuItem();
        redstartMenuItem = new javax.swing.JMenuItem();
        bluestartMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        
        fileMenu.setText("File");
          
          newGameMenuItem.setText("New Game");
            newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newGameMenuItemActionPerformed(evt);
                }
            }
            );
            fileMenu.add(newGameMenuItem);
            
          openGameMenuItem.setText("Open Game");
            openGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    openGameMenuItemActionPerformed(evt);
                }
            }
            );
            fileMenu.add(openGameMenuItem);
            
          playGameMenuItem.setText("Play");
            playGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    playGameMenuItemActionPerformed(evt);
                }
            }
            );
            fileMenu.add(playGameMenuItem);
            
          saveGameMenuItem.setText("Save Game");
            saveGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    saveGameMenuItemActionPerformed(evt);
                }
            }
            );
            fileMenu.add(saveGameMenuItem);
            
          terminateMenuItem.setText("Quit");
            terminateMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    terminateMenuItemActionPerformed(evt);
                }
            }
            );
            fileMenu.add(terminateMenuItem);
            menuBar.add(fileMenu);
          
        characterMenu.setText("Characters");
          
          newCharacterMenuItem.setText("New Character");
            newCharacterMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newCharacterMenuItemActionPerformed(evt);
                }
            }
            );
            characterMenu.add(newCharacterMenuItem);
            menuBar.add(characterMenu);
          
        spaceMenu.setText("Spaces");
          
          newSpaceMenuItem.setText("New Space");
            newSpaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newSpaceMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(newSpaceMenuItem);
            
          redstartMenuItem.setForeground(java.awt.Color.red);
            redstartMenuItem.setText("RedStart");
            redstartMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    redstartMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(redstartMenuItem);
            
          bluestartMenuItem.setForeground(java.awt.Color.blue);
            bluestartMenuItem.setText("BlueStart");
            bluestartMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bluestartMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(bluestartMenuItem);
            menuBar.add(spaceMenu);
          
        helpMenu.setText("Help");
          
          contentMenuItem.setText("Contents");
            helpMenu.add(contentMenuItem);
            
          aboutMenuItem.setText("About");
            helpMenu.add(aboutMenuItem);
            menuBar.add(helpMenu);
          getContentPane().setLayout(new java.awt.GridLayout(1, 1));
        setName("frmGame");
        setTitle("BuzzWorld");
        setResizable(false);
        setFont(new java.awt.Font ("Garamond", 0, 12));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );
        setJMenuBar(menuBar);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setSize(new java.awt.Dimension(600, 47));
        setLocation((screenSize.width-600)/2,(screenSize.height-47)/2);
    }//GEN-END:initComponents

  private void playGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playGameMenuItemActionPerformed
      if (gm != null && blue == null && red == null && gm.getBlueStart() != null && gm.getRedStart() != null) {
          PlayModel play = new PlayModel(gm);
          blue = new PlayView(play,PlayModel.PLAYMODEL_BLUE_TEAM, gm.getBlueStart());
          red = new PlayView(play,PlayModel.PLAYMODEL_RED_TEAM, gm.getRedStart());
          blue.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                playWindowClosed(evt);
            }
        }
        );
        red.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                playWindowClosed(evt);
            }
        }
        );
        blue.show();
        red.show();
      }
      else {
        if (gm == null) JOptionPane.showMessageDialog(this, "Please select a game file to play!", "No Game Requested", JOptionPane.INFORMATION_MESSAGE);
        else if (gm.getRedStart() == null || gm.getBlueStart() == null) JOptionPane.showMessageDialog(this, "Please select a red and blue start space to begin play!", "Start Space missing", JOptionPane.INFORMATION_MESSAGE);
        else JOptionPane.showMessageDialog(this, "Game in progress!", "Finished Play", JOptionPane.INFORMATION_MESSAGE);
      }
  }//GEN-LAST:event_playGameMenuItemActionPerformed
  private void playWindowClosed(java.awt.event.WindowEvent evt) {
      if (blue.isShowing()) {
        blue.dispose();
      }
      if (red.isShowing()) red.dispose();
      red = null;
      blue = null;
  }
   private void editWindowClosed(java.awt.event.WindowEvent evt) {
      views.remove(evt.getSource());
  }
  private void closeAllOpenWindows() {
      if (blue != null) {
        if (blue.isShowing()) blue.dispose();
        blue = null;
      }
      if (red != null) {
        if (red.isShowing()) red.dispose();
        red = null;
      }
      Iterator it = views.iterator();
      while (it.hasNext()) {
        ((Window) it.next()).dispose();
      }
      views.removeAllElements();
  }
  private void bluestartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bluestartMenuItemActionPerformed
      if (gm!= null) {
        SpaceView sp;  
        SpaceModel blueStart = gm.getBlueStart();
          if (blueStart == null) {
            blueStart = new SpaceModel();
            blueStart.setName("BlueStart");
            gm.addSpace(blueStart);
            gm.setBlueStart(blueStart);
          }
          sp = new SpaceView(blueStart, gm);
          views.add(sp);
          sp.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
        }
        );
          sp.show();
          repaint();
      }
  }//GEN-LAST:event_bluestartMenuItemActionPerformed

  private void redstartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redstartMenuItemActionPerformed
      if (gm!=null) {
          SpaceView sp;  
          SpaceModel redStart = gm.getRedStart();
          if (redStart == null) {
            redStart = new SpaceModel();
            redStart.setName("RedStart");
            gm.addSpace(redStart);
            gm.setRedStart(redStart);
          }
          sp = new SpaceView(redStart, gm);
          views.add(sp);
          sp.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
        }
        );
          sp.show();
          repaint();
      }
  }//GEN-LAST:event_redstartMenuItemActionPerformed

  private void newSpaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpaceMenuItemActionPerformed
    JMenuItem tempItem;
      if (gm != null) {
        SpaceView sp;
        SpaceModel newSM = new SpaceModel();
        newSM.setName("Temp" + String.valueOf(newSpaceCount));
        spaceMenu.add(tempItem = new JMenuItem(newSM.getName()));
        spaceList.add(tempItem);
        gm.addSpace(newSM);
        tempItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    spaceMenuItemChosen((JMenuItem) evt.getSource());
                }
            }
        );
          sp = new SpaceView(newSM, gm);
          views.add(sp);
          sp.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
        }
        );
          sp.show();
        newSpaceCount++;
      }
  }//GEN-LAST:event_newSpaceMenuItemActionPerformed

  public void paint(Graphics g) {
   Iterator it, it2;
   JMenuItem tempItem;
   CharacterModel tempModel;
   SpaceModel tempSModel;
    super.paint(g);
    
   //Loop through and make sure all the names are consistent with what the character models have registered     
    if (gm != null && gm.getCharacterList().isEmpty() == false) {
        it = gm.getCharacterList().iterator();
        it2 = characterList.iterator();
        while (it.hasNext() && it2.hasNext()) {
            tempItem = (JMenuItem) it2.next();
            tempModel = (CharacterModel) it.next();
            if (tempItem.getText().equals(tempModel.getName()) == false) {
                tempItem.setText(tempModel.getName());
            }
        }
    }

    //Loop through and make sure all the space menu items are consistent with their models
    if (gm != null && gm.getSpaceList().isEmpty() == false) {
        it = gm.getSpaceList().iterator();
        it2 = spaceList.iterator();
        while (it.hasNext() && it2.hasNext()) {
            tempSModel = (SpaceModel) it.next();
            if (tempSModel != gm.getRedStart() && tempSModel != gm.getBlueStart()) {
                tempItem = (JMenuItem) it2.next();
                if (tempItem.getText().equals(tempSModel.getName()) == false) {
                    tempItem.setText(tempSModel.getName());
                }
            }
        }
    }
  }
  
  private void newCharacterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCharacterMenuItemActionPerformed
      JMenuItem tempItem;
      if (gm != null) {
        CharacterView cv;  
        CharacterModel newCM = new CharacterModel();
        newCM.setName("Temp" + String.valueOf(newCharacterCount));
        gm.addCharacter(newCM);
        characterMenu.add(tempItem = new JMenuItem(newCM.getName()));
        characterList.add(tempItem);
        tempItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    menuItemChosen((JMenuItem) evt.getSource());
                }
            }
        );
        cv = new CharacterView(newCM, gm.getDirectory());
          views.add(cv);
          cv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
        }
        );
          cv.show();
        newCharacterCount++;
      }
  }//GEN-LAST:event_newCharacterMenuItemActionPerformed

  private void menuItemChosen(JMenuItem jItem) {
      CharacterModel temp = gm.getCharacter(jItem.getText());
      if (temp != null) {
          CharacterView cv = new CharacterView(temp, gm.getDirectory());
          views.add(cv);
          cv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
        }
        );
          cv.show();
      }
      repaint();
  }
  private void spaceMenuItemChosen(JMenuItem jItem) {
    SpaceModel temp = gm.getSpace(jItem.getText());
    if (temp != null){ 
          SpaceView sp = new SpaceView(temp, gm);
          views.add(sp);
          sp.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editWindowClosed(evt);
            }
            }
            );
          sp.show();
    }
    repaint();
  }
  private void saveGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGameMenuItemActionPerformed
      if (gm != null) gm.saveGame();
  }//GEN-LAST:event_saveGameMenuItemActionPerformed

  private void openGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGameMenuItemActionPerformed
    File file;
    String name;
    Iterator it;
    JMenuItem tempItem;
    JFileChooser selectFile = new JFileChooser();
    SpaceModel tempSModel;
    
    selectFile.setFileFilter(new StandardFileFilter("BUZZ", "BuzzWorld data files"));
    if (gm != null) gm.saveGame();
    selectFile.showDialog(this, "Select File");
    file = selectFile.getSelectedFile();
    if (file != null) {
        name = file.getAbsolutePath().toLowerCase();
        if (name.indexOf(".buzz") != -1) {
            name = file.getAbsolutePath();
        }
        else {
            name = file.getAbsolutePath() + ".buzz";
        }
        try {
            gm = GameModel.openGame(name);
        }
        catch (Exception e) {
            gm = null;
            return;
        }
        characterList.removeAllElements();
        spaceList.removeAllElements();
        newCharacterCount = 1;
        newSpaceCount = 1;
        closeAllOpenWindows();
        recreateMenuItems();
        if (gm != null) {
            if (gm.getCharacterList().isEmpty() == false) {
                it = gm.getCharacterList().iterator();
                while (it.hasNext()) {
                    characterMenu.add(tempItem = new JMenuItem(((CharacterModel) it.next()).getName()));
                    characterList.add(tempItem);
                    tempItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            menuItemChosen((JMenuItem) evt.getSource());
                        }
                    });    
                }
            }
           if (gm.getSpaceList().isEmpty() == false) {
                it = gm.getSpaceList().iterator();
                while (it.hasNext()) {
                    tempSModel = (SpaceModel) it.next();
                    if (tempSModel != gm.getRedStart() && tempSModel != gm.getBlueStart()) {
                        spaceMenu.add(tempItem = new JMenuItem(tempSModel.getName()));
                        spaceList.add(tempItem);
                        tempItem.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                spaceMenuItemChosen((JMenuItem) evt.getSource());
                            }
                        });    
                    }
                }
            }
        addMyListeners();
        repaint();
      }
    }
  }//GEN-LAST:event_openGameMenuItemActionPerformed

  private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
    File file;
    String name;
    JFileChooser selectFile = new JFileChooser();
    selectFile.setFileFilter(new StandardFileFilter("BUZZ", "BuzzWorld data files"));
    if (gm != null) gm.saveGame();
    selectFile.showDialog(this, "New File");
    file = selectFile.getSelectedFile();
    if (file != null) {
        if (file.getAbsolutePath().toLowerCase().indexOf(".buzz") != -1) {
            name = file.getAbsolutePath();
        }
        else {
            name = file.getAbsolutePath() + ".buzz";
        }
        gm = new GameModel(name);
        characterList.removeAllElements();
        spaceList.removeAllElements();
        closeAllOpenWindows();
        recreateMenuItems();
        newCharacterCount = 1;
        newSpaceCount = 1;
        if (gm != null) {
            addMyListeners();
            repaint();
        }
    }
  }//GEN-LAST:event_newGameMenuItemActionPerformed

  private void terminateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateMenuItemActionPerformed
      if (gm != null) {
          removeMyListeners();
          gm.saveGame();  
      }
      System.exit (0);
  }//GEN-LAST:event_terminateMenuItemActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        
        if (gm != null) {
            removeMyListeners();
            gm.saveGame();
        }
        System.exit (0);
    }//GEN-LAST:event_exitForm
    private void modelChanged(java.beans.PropertyChangeEvent evt) {
        repaint();
    }
    private void addMyListeners() {
        gm.addPropertyChangeListener(pcl = new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                modelChanged(evt);
            }
        });
    }
    private void recreateMenuItems() {
        int i;
        spaceMenu.removeAll();
        characterMenu.removeAll();
        newCharacterMenuItem = new JMenuItem();
        newCharacterMenuItem.setText("New Character");
            newCharacterMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newCharacterMenuItemActionPerformed(evt);
                }
            }
            );
            characterMenu.add(newCharacterMenuItem);
          
          newSpaceMenuItem = new JMenuItem();
          newSpaceMenuItem.setText("New Space");
            newSpaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    newSpaceMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(newSpaceMenuItem);
          
            redstartMenuItem = new JMenuItem();
          redstartMenuItem.setForeground(java.awt.Color.red);
            redstartMenuItem.setText("RedStart");
            redstartMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    redstartMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(redstartMenuItem);
            
            bluestartMenuItem = new JMenuItem();
          bluestartMenuItem.setForeground(java.awt.Color.blue);
            bluestartMenuItem.setText("BlueStart");
            bluestartMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bluestartMenuItemActionPerformed(evt);
                }
            }
            );
            spaceMenu.add(bluestartMenuItem);
    }
    private void removeMyListeners() {
        gm.removePropertyChangeListener(pcl);
    }
    public static void main (String args[]) {
        GameView obj = new GameView();
        obj.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JMenuItem openGameMenuItem;
    private javax.swing.JMenuItem playGameMenuItem;
    private javax.swing.JMenuItem saveGameMenuItem;
    private javax.swing.JMenuItem terminateMenuItem;
    private javax.swing.JMenu characterMenu;
    private javax.swing.JMenuItem newCharacterMenuItem;
    private javax.swing.JMenu spaceMenu;
    private javax.swing.JMenuItem newSpaceMenuItem;
    private javax.swing.JMenuItem redstartMenuItem;
    private javax.swing.JMenuItem bluestartMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    // End of variables declaration//GEN-END:variables

}
