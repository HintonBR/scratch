/*
 * ImagePanel.java
 *
 * Created on February 12, 2001, 5:15 PM
 */
import java.awt.*;

/**
 *
 * @author  Bryan
 * @version 
 */
public class ImagePanel extends javax.swing.JPanel {

    private String filename = "";
    private Image source;
    
/** Creates new form ImagePanel */
    public ImagePanel() {
        initComponents ();
    }
    
    public String getFilename() { return filename;}
    public void setFilename(String file) {
        
        if (filename.equals(file) == false) {
            filename = file;
            getImage();
            internalResize();
            paint(this.getGraphics());
        }
    }
    
    //Gets the image height and compares it to the parents
    //If the parent is bigger the panel scales to fit the size of the container 
    //If parent is smaller than hopefully in scroll pane because panel expands to hold image
    private void internalResize() {
        int width, height,x,y;
        if (source != null) {
                width = source.getWidth(this);
                height = source.getHeight(this);
                this.setSize(width, height);
                if (width < this.getParent().getWidth()) width = this.getParent().getWidth();
                if (height < this.getParent().getHeight()) height = this.getParent().getHeight();
                if (width != source.getWidth(this)) x = (width/2) - (source.getWidth(this)/2);
                else x = 0;
                if (height != source.getHeight(this)) y = (height/2) - (source.getHeight(this)/2);
                else y = 0;
                this.setLocation(x, y);
            }
    }
    
    //Scales the current image down to a set size
    public void scaleImage(int width, int height) {
        if (source != null) {
            source = source.getScaledInstance(width, height, Image.SCALE_FAST);
            internalResize();
        }
        paint(this.getGraphics());
    }
    
    public void paint(Graphics g) {
        int width, height;
        super.paint(g);
        if (source == null) {
            this.getImage();
            internalResize();
        }
        if (source != null) {
            width = source.getWidth(this);
            height = source.getHeight(this);
            this.setSize(width, height);
            g.drawImage(source, 0, 0, this);
        }
       
        else {
            g.drawString("No Image selected",this.getWidth()/2-g.getFontMetrics().stringWidth("No Image Selected")/2, this.getHeight()/2-g.getFontMetrics().getHeight()/2);
        }
        this.paintComponents(g);
  }
  
   private Image getImage() {
            try {
		if (filename.equals("")) return null;
		Toolkit TK = Toolkit.getDefaultToolkit(); 	
		source = TK.getImage(filename);			
                if (source == null) return null;
		MediaTracker track = new MediaTracker(this);
		track.addImage(source,0);		
	        track.waitForID(0); 
            }	
		catch(Exception e) {}
		return source;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        setLayout(new java.awt.GridLayout(1, 1));
    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
