/*
 * PlayView.java
 *
 * Created on February 3, 2001, 1:04 PM
 */

import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.border.*;
/**
 *
 * @author  Bryan
 * @version 
 */
public class PlayView extends javax.swing.JFrame {

    private PlayModel main;
    private int team;
    private SpaceModel currentSpace;
    private Vector characterCom;
    /** Creates new form PlayView */
    public PlayView(PlayModel p, int teamid, SpaceModel currSpace) {
        TitledBorder tb;
        main = p;
        team = teamid;
        initComponents ();
        characterCom = new Vector();
        currentSpace = currSpace;
        tb = ((TitledBorder) jPanel2.getBorder());
      tb.setTitle(currentSpace.getName());
      jPanel2.setBorder(tb);
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jTable2.setModel(new CharacterTableModel(main.getCharacters(team)));
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(100);
        pnlImage.setFilename(currentSpace.getImageFilename());
        addMyListeners();
        addComponents();
    }

     private void addMyListeners() {
        main.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                modelPropertyChange(evt);
            }
        });
        
        ((CharacterTableModel) jTable2.getModel()).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                modelPropertyChange(evt);
            }
        });
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlImage = new ImagePanel();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );
        
        jPanel1.setLayout(new java.awt.GridLayout(1, 1));
        jPanel1.setBorder(new javax.swing.border.TitledBorder("Characters"));
        
        
          jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
            jTable2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
            jTable2.setModel(new javax.swing.table.DefaultTableModel (
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Character Name", "Current Strength", "Current Space"
            }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Integer.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };
                
                public Class getColumnClass (int columnIndex) {
                    return types [columnIndex];
                }
                
                public boolean isCellEditable (int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            jTable2.setShowVerticalLines(false);
            jTable2.setPreferredScrollableViewportSize(new java.awt.Dimension(200, 400));
            jTable2.setShowHorizontalLines(false);
            jTable2.setFont(new java.awt.Font ("Dialog", 0, 8));
            jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable2MouseClicked(evt);
                }
            }
            );
            jScrollPane1.setViewportView(jTable2);
            
            jPanel1.add(jScrollPane1);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = -1;
        gridBagConstraints1.gridheight = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints1);
        
        
        jPanel2.setLayout(new java.awt.GridLayout(1, 1));
        jPanel2.setBorder(new javax.swing.border.TitledBorder("Current Space"));
        
        
          pnlImage.setLayout(null);
            pnlImage.setPreferredSize(new java.awt.Dimension(200, 200));
            jScrollPane2.setViewportView(pnlImage);
            
            jPanel2.add(jScrollPane2);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = -1;
        gridBagConstraints1.gridheight = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints1.weightx = 30.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints1);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setSize(new java.awt.Dimension(800, 600));
        setLocation((screenSize.width-800)/2,(screenSize.height-600)/2);
    }//GEN-END:initComponents

  private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
    int srow,srowcount;
    srowcount = jTable2.getSelectedRowCount();
    srow = jTable2.getSelectedRow();
    if (srowcount == 1 && srow != -1) {
        currentSpace = (SpaceModel) jTable2.getValueAt(srow, 2);
        repaint();
    }
  }//GEN-LAST:event_jTable2MouseClicked
    
  private void removeMyListeners() {}  
    
    private void modelPropertyChange(java.beans.PropertyChangeEvent evt) {
      if (evt.getPropertyName().equals(CharacterTableModel.CHARACTER_TABLE_MODEL)) {
        jTable2.revalidate();
        jTable2.repaint();
      }
      else if (evt.getPropertyName().equals(main.PLAYMODEL_CHARACTER_INSTANCE_CURRENT_STRENGTH_CHANGED) || evt.getPropertyName().equals(main.PLAYMODEL_CHARACTER_INSTANCE_MOVED) || evt.getPropertyName().equals(main.PLAYMODEL_CHARACTER_MODEL_CHANGED)) {
        repaint();
      }
      else if (evt.getPropertyName().equals(main.PLAYMODEL_CHARACTERSPACECHANGED)) {
          if (((SpaceModel) evt.getOldValue()) == currentSpace) {
            Iterator it = characterCom.iterator();
            CharacterComponent cur;
            while (it.hasNext()) {
                cur = ((CharacterComponent) it.next());
                if (cur.isMe((CharacterInstance) evt.getSource())) {
                    pnlImage.remove(cur);
                }
            }
          }
          if (((SpaceModel) evt.getNewValue()) == currentSpace) {
              CharacterComponent cm;
              if (team == ((CharacterInstance) evt.getSource()).getTeam()) {  
                 cm = new CharacterComponent(((CharacterInstance) evt.getSource()), true);
              }
              else {
                cm = new CharacterComponent(((CharacterInstance) evt.getSource()), false);
              }
              characterCom.add(cm);
            pnlImage.add(cm);
            repaint();
          }
          else if (((SpaceModel) evt.getOldValue()) == currentSpace && team == ((CharacterInstance) evt.getSource()).getTeam()) {
            currentSpace = ((CharacterInstance) evt.getSource()).getSpaceModel();
            repaint();
          }
      }
      else {    
              repaint();
      }
    }
    public void paint(Graphics g) {
      Image temp;
      int width, height;
      TitledBorder tb;
      Vector toremove = new Vector();
      this.setTitle("Play View for " + main.getTeamName(team));
      tb = ((TitledBorder) jPanel2.getBorder());
      tb.setTitle(currentSpace.getName());
      jPanel2.setBorder(tb);
      //We have to set the Border first and then repaint or our changes are queued up and do not 
      //occur until the next paint
      
      Iterator it = characterCom.iterator();
      while (it.hasNext()) {
        CharacterComponent c = (CharacterComponent) it.next();
        if (c.getCharacterInstance().isAlive() == false) {
            pnlImage.remove(c);
            toremove.add(c);
        }
      }
      if (toremove.isEmpty() == false) {
        it = toremove.iterator();
        while (it.hasNext()) {
            characterCom.remove(it.next());
        }    
      }
      toremove.removeAllElements();
      super.paint(g);
      if (pnlImage.getFilename().equals(currentSpace.getImageFilename())== false) {
          pnlImage.setFilename(currentSpace.getImageFilename());
          pnlImage.removeAll();
          characterCom.removeAllElements();
          addComponents();
          jScrollPane2.repaint();
          jScrollPane2.validate();
      }
      
       
    }
    
    private void addComponents()     {
      Vector chars;
        Iterator it;
        CharacterInstance ci;
        CharacterComponent cm;
      if (pnlImage.getFilename().equals("") == false) {
          chars = new Vector(main.getCharacters(currentSpace));
          if (chars.isEmpty() == false) {
              it = chars.iterator();
                while (it.hasNext()) {
                   ci = (CharacterInstance) it.next();
                   if (ci.isAlive()) {
                        if (team == ci.getTeam()) {  
                            cm = new CharacterComponent(ci, true);
                        }
                        else  {
                            cm = new CharacterComponent(ci, false);
                        }
                        characterCom.add(cm);
                        pnlImage.add(cm);
                    }
                }
        }
      }
   }
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
       removeMyListeners();
        this.dispose();
    }//GEN-LAST:event_exitForm


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private ImagePanel pnlImage;
    // End of variables declaration//GEN-END:variables

}
