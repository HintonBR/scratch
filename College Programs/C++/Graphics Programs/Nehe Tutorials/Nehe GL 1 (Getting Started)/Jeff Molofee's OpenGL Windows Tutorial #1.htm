<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0046)http://nehe.gamedev.net/tutorials/lesson01.asp -->
<HTML><HEAD><TITLE>Jeff Molofee's OpenGL Windows Tutorial #1</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<STYLE type=text/css>A:link {
	COLOR: #ccaaff; TEXT-DECORATION: none
}
A:visited {
	COLOR: #ccaaff; TEXT-DECORATION: none
}
A:active {
	COLOR: #ccaaff; TEXT-DECORATION: none
}
A:hover {
	COLOR: #ffccaa; TEXT-DECORATION: none
}
</STYLE>

<META content="MSHTML 5.50.4616.200" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000>
<CENTER><!-- Begin Ban Man Pro Banner Code -  Zone: NeHe -->
<SCRIPT language=JAVASCRIPT>
<!--
var browName = navigator.appName;
var browDateTime = (new Date()).getTime();
var browVersion = parseInt(navigator.appVersion);
var ua=navigator.userAgent.toLowerCase();
var adcode='';
if (browName=='Netscape'){
     if (browVersion>=5) 
          { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=4&Task=Get&Browser=NETSCAPE6&X=' + browDateTime + '" width=468 height=60 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
     else if ((browVersion>=4)&&(ua.indexOf("mac")==-1))
          { document.write('<S'+'CRIPT src="http://www.gamedev.net/banman/banman.asp?ZoneID=4&Task=Get&Browser=NETSCAPE4">');
          document.write('</'+'scr'+'ipt>');
          document.write(adcode); }
     else if (browVersion>=3) 
          { document.write('<A HREF="http://www.gamedev.net/banman/banman.asp?ZoneID=4&Task=Click&Mode=HTML&PageID=70554&RandomNumber=' + browDateTime + '" target="_new"><IMG SRC="http://www.gamedev.net/banman/banman.asp?ZoneID=4&Task=Get&Mode=HTML&PageID=70554&RandomNumber=' + browDateTime + '" width="468" height="60" border="0"></A>'); } }
if (browName=='Microsoft Internet Explorer')
     { document.write('<ifr'+'ame src="http://www.gamedev.net/banman/banman.asp?ZoneID=4&Task=Get&X=' + browDateTime + '" width=468 height=60 Marginwidth=0 Marginheight=0 Hspace=0 Vspace=0 Frameborder=0 Scrolling=No></ifr'+'ame>'); }
// --> 
</SCRIPT>
<NOSCRIPT><A target=_new 
href="http://www.gamedev.net/banman/banman.asp?ZoneID=4&amp;Task=Click&amp;Mode=HTML&amp;PageID=70554"><IMG 
height=60 src="Jeff Molofee's OpenGL Windows Tutorial #1_files/446064-8.gif" 
width=468 border=0></A> </NOSCRIPT><!-- End Ban Man Pro Banner Code -  Zone: NeHe --></CENTER><BR><BR><!-- NeHe Logo -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=326 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/logo.png" 
    height=130>&nbsp;</TD>
    <TD vAlign=center align=middle width="100%"><FONT color=#ffccaa 
      size=+3><B><I>Lesson 1</I></B></FONT></TD></TR></TBODY></TABLE><!-- Top Border - Joins With Logo (298) -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Welcome to my OpenGL tutorials. I 
      am an average guy with a passion for OpenGL! The first time I heard about 
      OpenGL was back when 3Dfx released their Hardware accelerated OpenGL 
      driver for the Voodoo 1 card. Immediately I knew OpenGL was something I 
      had to learn. Unfortunately, it was very hard to find any information 
      about OpenGL in books or on the net. I spent hours trying to make code 
      work and even more time begging people for help in email and on IRC. I 
      found that those people that understood OpenGL considered themselves 
      elite, and had no interest in sharing their knowledge. VERY frustrating! 
      <BR><BR>I created this web site so that people interested in learning 
      OpenGL would have a place to come if they needed help. In each of my 
      tutorials I try to explain, in as much detail as humanly possible, what 
      each line of code is doing. I try to keep my code simple (no MFC code to 
      learn)! An absolute newbie to both Visual C++ and OpenGL should be able to 
      go through the code, and have a pretty good idea of what's going on. My 
      site is just one of many sites offering OpenGL tutorials. If you're a 
      hardcore OpenGL programmer, my site may be too simplistic, but if you're 
      just starting out, I feel my site has a lot to offer! <BR><BR>This 
      tutorial was completely rewritten January 2000. This tutorial will teach 
      you how to set up an OpenGL window. The window can be windowed or 
      fullscreen, any size you want, any resolution you want, and any color 
      depth you want. The code is very flexible and can be used for all your 
      OpenGL projects. All my tutorials will be based on this code! I wrote the 
      code to be flexible, and powerful at the same time. All errors are 
      reported. There should be no memory leaks, and the code is easy to read 
      and easy to modify. Thanks to Fredric Echols for his modifications to the 
      code! <BR><BR>I'll start this tutorial by jumping right into the code. The 
      first thing you will have to do is build a project in Visual C++. If you 
      don't know how to do that, you should not be learning OpenGL, you should 
      be learning Visual C++. The downloadable code is Visual C++ 6.0 code. Some 
      versions of VC++ require that <B>bool</B> is changed to <B>BOOL</B>, 
      <B>true</B> is changed to <B>TRUE</B>, and <B>false</B> is changed to 
      <B>FALSE</B>. By making the changes mentioned, I have been able to compile 
      the code on Visual C++ 4.0 and 5.0 with no other problems. <BR><BR>After 
      you have created a new Win32 Application (<B><U>NOT</U></B> a console 
      application) in Visual C++, you will need to link the OpenGL libraries. In 
      Visual C++ go to Project, Settings, and then click on the LINK tab. Under 
      "Object/Library Modules" at the beginning of the line (before 
      kernel32.lib) add <B>OpenGL32.lib GLu32.lib</B> and <B>GLaux.lib</B>. Once 
      you've done this click on OK. You're now ready to write an OpenGL Windows 
      program. <BR><BR>The first 4 lines include the header files for each 
      library we are using. The lines look like this: </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>#include &lt;windows.h&gt;								<FONT color=#ffffaa>// Header File For Windows</FONT>
#include &lt;gl\gl.h&gt;								<FONT color=#ffffaa>// Header File For The OpenGL32 Library</FONT>
#include &lt;gl\glu.h&gt;								<FONT color=#ffffaa>// Header File For The GLu32 Library</FONT>
#include &lt;gl\glaux.h&gt;								<FONT color=#ffffaa>// Header File For The GLaux Library</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Next you need to set up all the 
      variables you plan to use in your program. This program will create a 
      blank OpenGL window, so we won't need to set up a lot of variables just 
      yet. The few variables that we do set up are very important, and will be 
      used in just about every OpenGL program you write using this code. 
      <BR><BR>The first line sets up a Rendering Context. Every OpenGL program 
      is linked to a Rendering Context. A Rendering Context is what links OpenGL 
      calls to the Device Context. The OpenGL Rendering Context is defined as 
      <B>hRC</B>. In order for your program to draw to a Window you need to 
      create a Device Context, this is done in the second line. The Windows 
      Device Context is defined as <B>hDC</B>. The DC connects the Window to the 
      GDI (Graphics Device Interface). The RC connects OpenGL to the DC. 
      <BR><BR>In the third line the variable <B>hWnd</B> will hold the handle 
      assigned to our window by Windows, and finally, the fourth line creates an 
      Instance (occurrence) for our program. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>HGLRC		hRC=NULL;							<FONT color=#ffffaa>// Permanent Rendering Context</FONT>
HDC		hDC=NULL;							<FONT color=#ffffaa>// Private GDI Device Context</FONT>
HWND		hWnd=NULL;							<FONT color=#ffffaa>// Holds Our Window Handle</FONT>
HINSTANCE	hInstance;							<FONT color=#ffffaa>// Holds The Instance Of The Application</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The first line below sets up an 
      array that we will use to monitor key presses on the keyboard. There are 
      many ways to watch for key presses on the keyboard, but this is the way I 
      do it. It's reliable, and it can handle more than one key being pressed at 
      a time. <BR><BR>The <B>active</B> variable will be used to tell our 
      program whether or not our Window has been minimized to the taskbar or 
      not. If the Window has been minimized we can do anything from suspend the 
      code to exit the program. I like to suspend the program. That way it won't 
      keep running in the background when it's minimized. <BR><BR>The variable 
      <B>fullscreen</B> is fairly obvious. If our program is running in 
      fullscreen mode, <B>fullscreen</B> will be TRUE, if our program is running 
      in Windowed mode, <B>fullscreen</B> will be FALSE. It's important to make 
      this global so that each procedure knows if the program is running in 
      fullscreen mode or not. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>bool	keys[256];								<FONT color=#ffffaa>// Array Used For The Keyboard Routine</FONT>
bool	active=TRUE;								<FONT color=#ffffaa>// Window Active Flag Set To TRUE By Default</FONT>
bool	fullscreen=TRUE;							<FONT color=#ffffaa>// Fullscreen Flag Set To Fullscreen Mode By Default</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Now we have to define WndProc(). 
      The reason we have to do this is because CreateGLWindow() has a reference 
      to WndProc() but WndProc() comes after CreateGLWindow(). In C if we want 
      to access a procedure or section of code that comes after the section of 
      code we are currently in we have to declare the section of code we wish to 
      access at the top of our program. So in the following line we define 
      WndProc() so that CreateGLWindow() can make reference to WndProc(). 
    </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>LRESULT	CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);				<FONT color=#ffffaa>// Declaration For WndProc</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The job of the next section of 
      code is to resize the OpenGL scene whenever the window (assuming you are 
      using a Window rather than fullscreen mode) has been resized. Even if you 
      are not able to resize the window (for example, you're in fullscreen 
      mode), this routine will still be called at least once when the program is 
      first run to set up our perspective view. The OpenGL scene will be resized 
      based on the width and height of the window it's being displayed in. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>GLvoid ReSizeGLScene(GLsizei width, GLsizei height)				<FONT color=#ffffaa>// Resize And Initialize The GL Window</FONT>
{
	if (height==0)								<FONT color=#ffffaa>// Prevent A Divide By Zero By</FONT>
	{
		height=1;							<FONT color=#ffffaa>// Making Height Equal One</FONT>
	}

	glViewport(0, 0, width, height);					<FONT color=#ffffaa>// Reset The Current Viewport</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The following lines set the screen 
      up for a perspective view. Meaning things in the distance get smaller. 
      This creates a realistic looking scene. The perspective is calculated with 
      a 45 degree viewing angle based on the windows width and height. The 0.1f, 
      100.0f is the starting point and ending point for how deep we can draw 
      into the screen. <BR><BR>glMatrixMode(GL_PROJECTION) indicates that the 
      next 2 lines of code will affect the projection matrix. The perspective 
      matrix is responsible for adding perspective to our scene. 
      glLoadIdentity() is similar to a reset. It restores the selected matrix to 
      it's original state. After glLoadIdentity() has been called we set up our 
      perspective view for the scene. glMatrixMode(GL_MODELVIEW) indicates that 
      any new transformations will affect the modelview matrix. The modelview 
      matrix is where our object information is stored. Lastly we reset the 
      modelview matrix. Don't worry if you don't understand this stuff, I will 
      be explaining it all in later tutorials. Just know that it HAS to be done 
      if you want a nice perspective scene. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	glMatrixMode(GL_PROJECTION);						<FONT color=#ffffaa>// Select The Projection Matrix</FONT>
	glLoadIdentity();							<FONT color=#ffffaa>// Reset The Projection Matrix</FONT>

	<FONT color=#ffffaa>// Calculate The Aspect Ratio Of The Window</FONT>
	gluPerspective(45.0f,(GLfloat)width/(GLfloat)height,0.1f,100.0f);

	glMatrixMode(GL_MODELVIEW);						<FONT color=#ffffaa>// Select The Modelview Matrix</FONT>
	glLoadIdentity();							<FONT color=#ffffaa>// Reset The Modelview Matrix</FONT>
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the next section of code we do 
      all of the setup for OpenGL. We set what color to clear the screen to, we 
      turn on the depth buffer, enable smooth shading, etc. This routine will 
      not be called until the OpenGL Window has been created. This procedure 
      returns a value but because our initialization isn't that complex we wont 
      worry about the value for now. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>int InitGL(GLvoid)								<FONT color=#ffffaa>// All Setup For OpenGL Goes Here</FONT>
{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next line enables smooth 
      shading. Smooth shading blends colors nicely across a polygon, and 
      smoothes out lighting. I will explain smooth shading in more detail in 
      another tutorial. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	glShadeModel(GL_SMOOTH);						<FONT color=#ffffaa>// Enables Smooth Shading</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The following line sets the color 
      of the screen when it clears. If you don't know how colors work, I'll 
      quickly explain. The color values range from 0.0f to 1.0f. 0.0f being the 
      darkest and 1.0f being the brightest. The first parameter after 
      glClearColor is the Red Intensity, the second parameter is for Green and 
      the third is for Blue. The higher the number is to 1.0f, the brighter that 
      specific color will be. The last number is an Alpha value. When it comes 
      to clearing the screen, we wont worry about the 4th number. For now leave 
      it at 0.0f. I will explain its use in another tutorial. <BR><BR>You create 
      different colors by mixing the three primary colors for light (red, green, 
      blue). Hope you learned primaries in school. So, if you had 
      glClearColor(0.0f,0.0f,1.0f,0.0f) you would be clearing the screen to a 
      bright blue. If you had glClearColor(0.5f,0.0f,0.0f,0.0f) you would be 
      clearing the screen to a medium red. Not bright (1.0f) and not dark 
      (0.0f). To make a white background, you would set all the colors as high 
      as possible (1.0f). To make a black background you would set all the 
      colors to as low as possible (0.0f). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);					<FONT color=#ffffaa>// Black Background</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next three lines have to do 
      with the Depth Buffer. Think of the depth buffer as layers into the 
      screen. The depth buffer keeps track of how deep objects are into the 
      screen. We won't really be using the depth buffer in this program, but 
      just about every OpenGL program that draws on the screen in 3D will use 
      the depth buffer. It sorts out which object to draw first so that a square 
      you drew behind a circle doesn't end up on top of the circle. The depth 
      buffer is a very important part of OpenGL. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	glClearDepth(1.0f);							<FONT color=#ffffaa>// Depth Buffer Setup</FONT>
	glEnable(GL_DEPTH_TEST);						<FONT color=#ffffaa>// Enables Depth Testing</FONT>
	glDepthFunc(GL_LEQUAL);							<FONT color=#ffffaa>// The Type Of Depth Test To Do</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Next we tell OpenGL we want the 
      best perspective correction to be done. This causes a very tiny 
      performance hit, but makes the perspective view look a bit better. 
    </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);			<FONT color=#ffffaa>// Really Nice Perspective Calculations</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Finally we return TRUE. If we 
      wanted to see if initialization went ok, we could check to see if TRUE or 
      FALSE was returned. You can add code of your own to return FALSE if an 
      error happens. For now we won't worry about it. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	return TRUE;								<FONT color=#ffffaa>// Initialization Went OK</FONT>
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This section is where all of your 
      drawing code will go. Anything you plan to display on the screen will go 
      in this section of code. Each tutorial after this one will add code to 
      this section of the program. If you already have an understanding of 
      OpenGL, you can try creating basic shapes by adding OpenGL code below 
      glLoadIdentity() and before return TRUE. If you're new to OpenGL, wait for 
      my next tutorial. For now all we will do is clear the screen to the color 
      we previously decided on, clear the depth buffer and reset the scene. We 
      wont draw anything yet. <BR><BR>The return TRUE tells our program that 
      there were no problems. If you wanted the program to stop for some reason, 
      adding a return FALSE line somewhere before return TRUE will tell our 
      program that the drawing code failed. The program will then quit. 
    </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>int DrawGLScene(GLvoid)								<FONT color=#ffffaa>// Here's Where We Do All The Drawing</FONT>
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);			<FONT color=#ffffaa>// Clear The Screen And The Depth Buffer</FONT>
	glLoadIdentity();							<FONT color=#ffffaa>// Reset The Current Modelview Matrix</FONT>
	return TRUE;								<FONT color=#ffffaa>// Everything Went OK</FONT>
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next section of code is called 
      just before the program quits. The job of KillGLWindow() is to release the 
      Rendering Context, the Device Context and finally the Window Handle. I've 
      added a lot of error checking. If the program is unable to destroy any 
      part of the Window, a message box with an error message will pop up, 
      telling you what failed. Making it a lot easier to find problems in your 
      code. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>GLvoid KillGLWindow(GLvoid)							<FONT color=#ffffaa>// Properly Kill The Window</FONT>
{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The first thing we do in 
      KillGLWindow() is check to see if we are in fullscreen mode. If we are, 
      we'll switch back to the desktop. We should destroy the Window before 
      disabling fullscreen mode, but on some video cards if we destroy the 
      Window BEFORE we disable fullscreen mode, the desktop will become corrupt. 
      So we'll disable fullscreen mode first. This will prevent the desktop from 
      becoming corrupt, and works well on both Nvidia and 3dfx video cards! 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (fullscreen)								<FONT color=#ffffaa>// Are We In Fullscreen Mode?</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">We use 
      ChangeDisplaySettings(NULL,0) to return us to our original desktop. 
      Passing NULL as the first parameter and 0 as the second parameter forces 
      Windows to use the values currently stored in the Windows registry (the 
      default resolution, bit depth, frequency, etc) effectively restoring our 
      original desktop. After we've switched back to the desktop we make the 
      cursor visible again. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		ChangeDisplaySettings(NULL,0);					<FONT color=#ffffaa>// If So Switch Back To The Desktop</FONT>
		ShowCursor(TRUE);						<FONT color=#ffffaa>// Show Mouse Pointer</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The code below checks to see if we 
      have a Rendering Context (<B>hRC</B>). If we don't, the program will jump 
      to the section of code below that checks to see if we have a Device 
      Context. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (hRC)								<FONT color=#ffffaa>// Do We Have A Rendering Context?</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we have a Rendering Context, 
      the code below will check to see if we are able to release it (detach the 
      <B>hRC</B> from the <B>hDC</B>). Notice the way I'm checking for errors. 
      I'm basically telling our program to try freeing it (with 
      wglMakeCurrent(NULL,NULL), then I check to see if freeing it was 
      successful or not. Nicely combining a few lines of code into one line. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		if (!wglMakeCurrent(NULL,NULL))					<FONT color=#ffffaa>// Are We Able To Release The DC And RC Contexts?</FONT>
		{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we were unable to release the 
      DC and RC contexts, MessageBox() will pop up an error message letting us 
      know the DC and RC could not be released. NULL means the message box has 
      no parent Window. The text right after NULL is the text that appears in 
      the message box. "SHUTDOWN ERROR" is the text that appears at the top of 
      the message box (title). Next we have MB_OK, this means we want a message 
      box with one button labelled "OK". MB_ICONINFORMATION makes a lower case i 
      in a circle appear inside the message box (makes it stand out a bit more). 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			MessageBox(NULL,"Release Of DC And RC Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Next we try to delete the 
      Rendering Context. If we were unsuccessful an error message will pop up. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		if (!wglDeleteContext(hRC))					<FONT color=#ffffaa>// Are We Able To Delete The RC?</FONT>
		{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we were unable to delete the 
      Rendering Context the code below will pop up a message box letting us know 
      that deleting the RC was unsuccessful. <B>hRC</B> will be set to NULL. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			MessageBox(NULL,"Release Rendering Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		}
		hRC=NULL;							<FONT color=#ffffaa>// Set RC To NULL</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Now we check to see if our program 
      has a Device Context and if it does, we try to release it. If we're unable 
      to release the Device Context an error message will pop up and <B>hDC</B> 
      will be set to NULL. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (hDC &amp;&amp; !ReleaseDC(hWnd,hDC))					<FONT color=#ffffaa>// Are We Able To Release The DC</FONT>
	{
		MessageBox(NULL,"Release Device Context Failed.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hDC=NULL;							<FONT color=#ffffaa>// Set DC To NULL</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Now we check to see if there is a 
      Window Handle and if there is, we try to destroy the Window using 
      DestroyWindow(<B>hWnd</B>). If we are unable to destroy the Window, an 
      error message will pop up and <B>hWnd</B> will be set to NULL. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (hWnd &amp;&amp; !DestroyWindow(hWnd))					<FONT color=#ffffaa>// Are We Able To Destroy The Window?</FONT>
	{
		MessageBox(NULL,"Could Not Release hWnd.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hWnd=NULL;							<FONT color=#ffffaa>// Set hWnd To NULL</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Last thing to do is unregister our 
      Windows Class. This allows us to properly kill the window, and then reopen 
      another window without receiving the error message "Windows Class already 
      registered". </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!UnregisterClass("OpenGL",hInstance))			// Are We Able To Unregister Class
	{
		MessageBox(NULL,"Could Not Unregister Class.","SHUTDOWN ERROR",MB_OK | MB_ICONINFORMATION);
		hInstance=NULL;									// Set hInstance To NULL
	}
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next section of code creates 
      our OpenGL Window. I spent a lot of time trying to decide if I should 
      create a fixed fullscreen Window that doesn't require a lot of extra code, 
      or an easy to customize user friendly Window that requires a lot more 
      code. I decided the user friendly Window with a lot more code would be the 
      best choice. I get asked the following questions all the time in email: 
      How can I create a Window instead of using fullscreen? How do I change the 
      Window's title? How do I change the resolution or pixel format of the 
      Window? The following code does all of that! Therefore it's better 
      learning material and will make writing OpenGL programs of your own a lot 
      easier! <BR><BR>As you can see the procedure returns BOOL (TRUE or FALSE), 
      it also takes 5 parameters: <B>title</B> of the Window, <B>width</B> of 
      the Window, <B>height</B> of the Window, <B>bits</B> (16/24/32), and 
      finally <B>fullscreenflag</B> TRUE for fullscreen or FALSE for windowed. 
      We return a boolean value that will tell us if the Window was created 
      successfully. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>BOOL CreateGLWindow(char* title, int width, int height, int bits, bool fullscreenflag)
{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">When we ask Windows to find us a 
      pixel format that matches the one we want, the number of the mode that 
      Windows ends up finding for us will be stored in the variable 
      <B>PixelFormat</B>. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	GLuint		PixelFormat;						<FONT color=#ffffaa>// Holds The Results After Searching For A Match</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms"><B>wc</B> will be used to hold our 
      Window Class structure. The Window Class structure holds information about 
      our window. By changing different fields in the Class we can change how 
      the window looks and behaves. Every window belongs to a Window Class. 
      Before you create a window, you MUST register a Class for the window. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	WNDCLASS	wc;							<FONT color=#ffffaa>// Windows Class Structure</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms"><B>dwExStyle</B> and 
      <B>dwStyle</B> will store the Extended and normal Window Style 
      Information. I use variables to store the styles so that I can change the 
      styles depending on what type of window I need to create (A popup window 
      for fullscreen or a window with a border for windowed mode) </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	DWORD		dwExStyle;						<FONT color=#ffffaa>// Window Extended Style</FONT>
	DWORD		dwStyle;						<FONT color=#ffffaa>// Window Style</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The following 5 lines of code grab 
      the upper left, and lower right values of a rectangle. We'll use these 
      values to adjust our window so that the area we draw on is the exact 
      resolution we want. Normally if we create a 640x480 window, the borders of 
      the window take up some of our resolution. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	RECT WindowRect;							<FONT color=#ffffaa>// Grabs Rectangle Upper Left / Lower Right Values</FONT>
	WindowRect.left=(long)0;						<FONT color=#ffffaa>// Set Left Value To 0</FONT>
	WindowRect.right=(long)width;						<FONT color=#ffffaa>// Set Right Value To Requested Width</FONT>
	WindowRect.top=(long)0;							<FONT color=#ffffaa>// Set Top Value To 0</FONT>
	WindowRect.bottom=(long)height;						<FONT color=#ffffaa>// Set Bottom Value To Requested Height</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the next line of code we make 
      the global variable <B>fullscreen</B> equal <B>fullscreenflag</B>. So if 
      we made our Window fullscreen, the variable <B>fullscreenflag</B> would be 
      TRUE. If we didn't make the variable <B>fullscreen</B> equal 
      <B>fullscreenflag</B>, the variable <B>fullscreen</B> would stay FALSE. If 
      we were killing the window, and the computer was in fullscreen mode, but 
      the variable fullscreen was FALSE instead of TRUE like it should be, the 
      computer wouldn't switch back to the desktop, because it would think it 
      was already showing the desktop. God I hope that makes sense. Basically to 
      sum it up, <B>fullscreen</B> has to equal whatever <B>fullscreenflag</B> 
      equals, otherwise there will be problems. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	fullscreen=fullscreenflag;						<FONT color=#ffffaa>// Set The Global Fullscreen Flag</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the next section of code, we 
      grab an instance for our Window, then we define the Window Class. 
      <BR><BR>The style CS_HREDRAW and CS_VREDRAW force the Window to redraw 
      whenever it is resized. CS_OWNDC creates a private DC for the Window. 
      Meaning the DC is not shared across applications. WndProc is the procedure 
      that watches for messages in our program. No extra Window data is used so 
      we zero the two fields. Then we set the instance. Next we set hIcon to 
      NULL meaning we don't want an ICON in the Window, and for a mouse pointer 
      we use the standard arrow. The background color doesn't matter (we set 
      that in GL). We don't want a menu in this Window so we set it to NULL, and 
      the class name can be any name you want. I'll use "OpenGL" for simplicity. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	hInstance		= GetModuleHandle(NULL);			<FONT color=#ffffaa>// Grab An Instance For Our Window</FONT>
	wc.style		= CS_HREDRAW | CS_VREDRAW | CS_OWNDC;		<FONT color=#ffffaa>// Redraw On Move, And Own DC For Window</FONT>
	wc.lpfnWndProc		= (WNDPROC) WndProc;				<FONT color=#ffffaa>// WndProc Handles Messages</FONT>
	wc.cbClsExtra		= 0;						<FONT color=#ffffaa>// No Extra Window Data</FONT>
	wc.cbWndExtra		= 0;						<FONT color=#ffffaa>// No Extra Window Data</FONT>
	wc.hInstance		= hInstance;					<FONT color=#ffffaa>// Set The Instance</FONT>
	wc.hIcon		= LoadIcon(NULL, IDI_WINLOGO);			<FONT color=#ffffaa>// Load The Default Icon</FONT>
	wc.hCursor		= LoadCursor(NULL, IDC_ARROW);			<FONT color=#ffffaa>// Load The Arrow Pointer</FONT>
	wc.hbrBackground	= NULL;						<FONT color=#ffffaa>// No Background Required For GL</FONT>
	wc.lpszMenuName		= NULL;						<FONT color=#ffffaa>// We Don't Want A Menu</FONT>
	wc.lpszClassName	= "OpenGL";					<FONT color=#ffffaa>// Set The Class Name</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Now we register the Class. If 
      anything goes wrong, an error message will pop up. Clicking on OK in the 
      error box will exit the program. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!RegisterClass(&amp;wc))						<FONT color=#ffffaa>// Attempt To Register The Window Class</FONT>
	{
		MessageBox(NULL,"Failed To Register The Window Class.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Exit And Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Now we check to see if the program 
      should run in fullscreen mode or windowed mode. If it should be fullscreen 
      mode, we'll attempt to set fullscreen mode. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (fullscreen)								<FONT color=#ffffaa>// Attempt Fullscreen Mode?</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next section of code is 
      something people seem to have a lot of problems with... switching to 
      fullscreen mode. There are a few very important things you should keep in 
      mind when switching to full screen mode. Make sure the width and height 
      that you use in fullscreen mode is the same as the width and height you 
      plan to use for your window, and most importantly, set fullscreen mode 
      BEFORE you create your window. In this code, you don't have to worry about 
      the width and height, the fullscreen and the window size are both set to 
      be the size requested. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		DEVMODE dmScreenSettings;					<FONT color=#ffffaa>// Device Mode</FONT>
		memset(&amp;dmScreenSettings,0,sizeof(dmScreenSettings));		<FONT color=#ffffaa>// Makes Sure Memory's Cleared</FONT>
		dmScreenSettings.dmSize=sizeof(dmScreenSettings);		<FONT color=#ffffaa>// Size Of The Devmode Structure</FONT>
		dmScreenSettings.dmPelsWidth	= width;			<FONT color=#ffffaa>// Selected Screen Width</FONT>
		dmScreenSettings.dmPelsHeight	= height;			<FONT color=#ffffaa>// Selected Screen Height</FONT>
		dmScreenSettings.dmBitsPerPel	= bits;				<FONT color=#ffffaa>// Selected Bits Per Pixel</FONT>
		dmScreenSettings.dmFields=DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT;
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the code above we clear room to 
      store our video settings. We set the width, height and bits that we want 
      the screen to switch to. In the code below we try to set the requested 
      full screen mode. We stored all the information about the width, height 
      and bits in dmScreenSettings. In the line below ChangeDisplaySettings 
      tries to switch to a mode that matches what we stored in dmScreenSettings. 
      I use the parameter CDS_FULLSCREEN when switching modes, because it's 
      supposed to remove the start bar at the bottom of the screen, plus it 
      doesn't move or resize the windows on your desktop when you switch to 
      fullscreen mode and back. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		<FONT color=#ffffaa>// Try To Set Selected Mode And Get Results.  NOTE: CDS_FULLSCREEN Gets Rid Of Start Bar.</FONT>
		if (ChangeDisplaySettings(&amp;dmScreenSettings,CDS_FULLSCREEN)!=DISP_CHANGE_SUCCESSFUL)
		{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the mode couldn't be set the 
      code below will run. If a matching fullscreen mode doesn't exist, a 
      messagebox will pop up offering two options... The option to run in a 
      window or the option to quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			<FONT color=#ffffaa>// If The Mode Fails, Offer Two Options.  Quit Or Run In A Window.</FONT>
			if (MessageBox(NULL,"The Requested Fullscreen Mode Is Not Supported By\nYour Video Card. Use Windowed Mode Instead?","NeHe GL",MB_YESNO|MB_ICONEXCLAMATION)==IDYES)
			{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the user decided to use 
      windowed mode, the variable <B>fullscreen</B> becomes FALSE, and the 
      program continues running. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>				fullscreen=FALSE;				<FONT color=#ffffaa>// Select Windowed Mode (Fullscreen=FALSE)</FONT>
			}
			else
			{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the user decided to quit, a 
      messagebox will pop up telling the user that the program is about to 
      close. FALSE will be returned telling our program that the window was not 
      created successfully. The program will then quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>				<FONT color=#ffffaa>// Pop Up A Message Box Letting User Know The Program Is Closing.</FONT>
				MessageBox(NULL,"Program Will Now Close.","ERROR",MB_OK|MB_ICONSTOP);
				return FALSE;					<FONT color=#ffffaa>// Exit And Return FALSE</FONT>
			}
		}
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Because the fullscreen code above 
      may have failed and the user may have decided to run the program in a 
      window instead, we check once again to see if <B>fullscreen</B> is TRUE or 
      FALSE before we set up the screen / window type. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (fullscreen)								<FONT color=#ffffaa>// Are We Still In Fullscreen Mode?</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we are still in fullscreen mode 
      we'll set the extended style to WS_EX_APPWINDOW, which force a top level 
      window down to the taskbar once our window is visible. For the window 
      style we'll create a WS_POPUP window. This type of window has no border 
      around it, making it perfect for fullscreen mode. <BR><BR>Finally, we 
      disable the mouse pointer. If your program is not interactive, it's 
      usually nice to disable the mouse pointer when in fullscreen mode. It's up 
      to you though. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		dwExStyle=WS_EX_APPWINDOW;					<FONT color=#ffffaa>// Window Extended Style</FONT>
		dwStyle=WS_POPUP;						<FONT color=#ffffaa>// Windows Style</FONT>
		ShowCursor(FALSE);						<FONT color=#ffffaa>// Hide Mouse Pointer</FONT>
	}
	else
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we're using a window instead of 
      fullscreen mode, we'll add WS_EX_WINDOWEDGE to the extended style. This 
      gives the window a more 3D look. For style we'll use WS_OVERLAPPEDWINDOW 
      instead of WS_POPUP. WS_OVERLAPPEDWINDOW creates a window with a title 
      bar, sizing border, window menu, and minimize / maximize buttons. 
    </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		dwExStyle=WS_EX_APPWINDOW | WS_EX_WINDOWEDGE;			<FONT color=#ffffaa>// Window Extended Style</FONT>
		dwStyle=WS_OVERLAPPEDWINDOW;					<FONT color=#ffffaa>// Windows Style</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The line below adjust our window 
      depending on what style of window we are creating. The adjustment will 
      make our window exactly the resolution we request. Normally the borders 
      will overlap parts of our window. By using the AdjustWindowRectEx command 
      none of our OpenGL scene will be covered up by the borders, instead, the 
      window will be made larger to account for the pixels needed to draw the 
      window border. In fullscreen mode, this command has no effect. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	AdjustWindowRectEx(&amp;WindowRect, dwStyle, FALSE, dwExStyle);		<FONT color=#ffffaa>// Adjust Window To True Requested Size</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the next section of code, we're 
      going to create our window and check to see if it was created properly. We 
      pass CreateWindowEx() all the parameters it requires. The extended style 
      we decided to use. The class name (which has to be the same as the name 
      you used when you registered the Window Class). The window title. The 
      window style. The top left position of your window (0,0 is a safe bet). 
      The width and height of the window. We don't want a parent window, and we 
      don't want a menu so we set both these parameters to NULL. We pass our 
      window instance, and finally we NULL the last parameter. <BR><BR>Notice we 
      include the styles WS_CLIPSIBLINGS and WS_CLIPCHILDREN along with the 
      style of window we've decided to use. WS_CLIPSIBLINGS and WS_CLIPCHILDREN 
      are both REQUIRED for OpenGL to work properly. These styles prevent other 
      windows from drawing over or into our OpenGL Window. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!(hWnd=CreateWindowEx(	dwExStyle,				<FONT color=#ffffaa>// Extended Style For The Window</FONT>
					"OpenGL",				<FONT color=#ffffaa>// Class Name</FONT>
					title,					<FONT color=#ffffaa>// Window Title</FONT>
					WS_CLIPSIBLINGS |			<FONT color=#ffffaa>// Required Window Style</FONT>
					WS_CLIPCHILDREN |			<FONT color=#ffffaa>// Required Window Style</FONT>
					dwStyle,				<FONT color=#ffffaa>// Selected Window Style</FONT>
					0, 0,					<FONT color=#ffffaa>// Window Position</FONT>
					WindowRect.right-WindowRect.left,	<FONT color=#ffffaa>// Calculate Adjusted Window Width</FONT>
					WindowRect.bottom-WindowRect.top,	<FONT color=#ffffaa>// Calculate Adjusted Window Height</FONT>
					NULL,					<FONT color=#ffffaa>// No Parent Window</FONT>
					NULL,					<FONT color=#ffffaa>// No Menu</FONT>
					hInstance,				<FONT color=#ffffaa>// Instance</FONT>
					NULL)))					<FONT color=#ffffaa>// Don't Pass Anything To WM_CREATE</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Next we check to see if our window 
      was created properly. If our window was created, <B>hWnd</B> will hold the 
      window handle. If the window wasn't created the code below will pop up an 
      error message and the program will quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Window Creation Error.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next section of code describes 
      a Pixel Format. We choose a format that supports OpenGL and double 
      buffering, along with RGBA (red, green, blue, alpha channel). We try to 
      find a pixel format that matches the bits we decided on 
      (16bit,24bit,32bit). Finally we set up a 16bit Z-Buffer. The remaining 
      parameters are either not used or are not important (aside from the 
      stencil buffer and the (slow) accumulation buffer). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	static	PIXELFORMATDESCRIPTOR pfd=					<FONT color=#ffffaa>// pfd Tells Windows How We Want Things To Be</FONT>
	{
		sizeof(PIXELFORMATDESCRIPTOR),					<FONT color=#ffffaa>// Size Of This Pixel Format Descriptor</FONT>
		1,								<FONT color=#ffffaa>// Version Number</FONT>
		PFD_DRAW_TO_WINDOW |						<FONT color=#ffffaa>// Format Must Support Window</FONT>
		PFD_SUPPORT_OPENGL |						<FONT color=#ffffaa>// Format Must Support OpenGL</FONT>
		PFD_DOUBLEBUFFER,						<FONT color=#ffffaa>// Must Support Double Buffering</FONT>
		PFD_TYPE_RGBA,							<FONT color=#ffffaa>// Request An RGBA Format</FONT>
		bits,								<FONT color=#ffffaa>// Select Our Color Depth</FONT>
		0, 0, 0, 0, 0, 0,						<FONT color=#ffffaa>// Color Bits Ignored</FONT>
		0,								<FONT color=#ffffaa>// No Alpha Buffer</FONT>
		0,								<FONT color=#ffffaa>// Shift Bit Ignored</FONT>
		0,								<FONT color=#ffffaa>// No Accumulation Buffer</FONT>
		0, 0, 0, 0,							<FONT color=#ffffaa>// Accumulation Bits Ignored</FONT>
		16,								<FONT color=#ffffaa>// 16Bit Z-Buffer (Depth Buffer)</FONT>
		0,								<FONT color=#ffffaa>// No Stencil Buffer</FONT>
		0,								<FONT color=#ffffaa>// No Auxiliary Buffer</FONT>
		PFD_MAIN_PLANE,							<FONT color=#ffffaa>// Main Drawing Layer</FONT>
		0,								<FONT color=#ffffaa>// Reserved</FONT>
		0, 0, 0								<FONT color=#ffffaa>// Layer Masks Ignored</FONT>
	};
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If there were no errors while 
      creating the window, we'll attempt to get an OpenGL Device Context. If we 
      can't get a DC an error message will pop onto the screen, and the program 
      will quit (return FALSE). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!(hDC=GetDC(hWnd)))							<FONT color=#ffffaa>// Did We Get A Device Context?</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Can't Create A GL Device Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we managed to get a Device 
      Context for our OpenGL window we'll try to find a pixel format that 
      matches the one we described above. If Windows can't find a matching pixel 
      format, an error message will pop onto the screen and the program will 
      quit (return FALSE). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!(PixelFormat=ChoosePixelFormat(hDC,&amp;pfd)))				<FONT color=#ffffaa>// Did Windows Find A Matching Pixel Format?</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Can't Find A Suitable PixelFormat.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If windows found a matching pixel 
      format we'll try setting the pixel format. If the pixel format cannot be 
      set, an error message will pop up on the screen and the program will quit 
      (return FALSE). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if(!SetPixelFormat(hDC,PixelFormat,&amp;pfd))				<FONT color=#ffffaa>// Are We Able To Set The Pixel Format?</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Can't Set The PixelFormat.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the pixel format was set 
      properly we'll try to get a Rendering Context. If we can't get a Rendering 
      Context an error message will be displayed on the screen and the program 
      will quit (return FALSE). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!(hRC=wglCreateContext(hDC)))					<FONT color=#ffffaa>// Are We Able To Get A Rendering Context?</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Can't Create A GL Rendering Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If there have been no errors so 
      far, and we've managed to create both a Device Context and a Rendering 
      Context all we have to do now is make the Rendering Context active. If we 
      can't make the Rendering Context active an error message will pop up on 
      the screen and the program will quit (return FALSE). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if(!wglMakeCurrent(hDC,hRC))						<FONT color=#ffffaa>// Try To Activate The Rendering Context</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Can't Activate The GL Rendering Context.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If everything went smoothly, and 
      our OpenGL window was created we'll show the window, set it to be the 
      foreground window (giving it more priority) and then set the focus to that 
      window. Then we'll call ReSizeGLScene passing the screen width and height 
      to set up our perspective OpenGL screen. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	ShowWindow(hWnd,SW_SHOW);						<FONT color=#ffffaa>// Show The Window</FONT>
	SetForegroundWindow(hWnd);						<FONT color=#ffffaa>// Slightly Higher Priority</FONT>
	SetFocus(hWnd);								<FONT color=#ffffaa>// Sets Keyboard Focus To The Window</FONT>
	ReSizeGLScene(width, height);						<FONT color=#ffffaa>// Set Up Our Perspective GL Screen</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Finally we jump to InitGL() where 
      we can set up lighting, textures, and anything else that needs to be 
      setup. You can do your own error checking in InitGL(), and pass back TRUE 
      (everythings OK) or FALSE (somethings not right). For example, if you were 
      loading textures in InitGL() and had an error, you may want the program to 
      stop. If you send back FALSE from InitGL() the lines of code below will 
      see the FALSE as an error message and the program will quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	if (!InitGL())								<FONT color=#ffffaa>// Initialize Our Newly Created GL Window</FONT>
	{
		KillGLWindow();							<FONT color=#ffffaa>// Reset The Display</FONT>
		MessageBox(NULL,"Initialization Failed.","ERROR",MB_OK|MB_ICONEXCLAMATION);
		return FALSE;							<FONT color=#ffffaa>// Return FALSE</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If we've made it this far, it's 
      safe to assume the window creation was successful. We return TRUE to 
      WinMain() telling WinMain() there were no errors. This prevents the 
      program from quitting. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	return TRUE;								<FONT color=#ffffaa>// Success</FONT>
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This is where all the window 
      messages are dealt with. When we registred the Window Class we told it to 
      jump to this section of code to deal with window messages. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>LRESULT CALLBACK WndProc(	HWND	hWnd,					<FONT color=#ffffaa>// Handle For This Window</FONT>
				UINT	uMsg,					<FONT color=#ffffaa>// Message For This Window</FONT>
				WPARAM	wParam,					<FONT color=#ffffaa>// Additional Message Information</FONT>
				LPARAM	lParam)					<FONT color=#ffffaa>// Additional Message Information</FONT>
{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The code below sets <B>uMsg</B> as 
      the value that all the case statements will be compared to. <B>uMsg</B> 
      will hold the name of the message we want to deal with. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	switch (uMsg)								<FONT color=#ffffaa>// Check For Windows Messages</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">if <B>uMsg</B> is WM_ACTIVE we 
      check to see if our window is still active. If our window has been 
      minimized the variable <B>active</B> will be FALSE. If our window is 
      active, the variable <B>active</B> will be TRUE. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_ACTIVATE:						<FONT color=#ffffaa>// Watch For Window Activate Message</FONT>
		{
			if (!HIWORD(wParam))					<FONT color=#ffffaa>// Check Minimization State</FONT>
			{
				active=TRUE;					<FONT color=#ffffaa>// Program Is Active</FONT>
			}
			else
			{
				active=FALSE;					<FONT color=#ffffaa>// Program Is No Longer Active</FONT>
			}

			return 0;						<FONT color=#ffffaa>// Return To The Message Loop</FONT>
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the message is WM_SYSCOMMAND 
      (system command) we'll compare <B>wParam</B> against the case statements. 
      If <B>wParam</B> is SC_SCREENSAVE or SC_MONITORPOWER either a screensaver 
      is trying to start or the monitor is trying to enter power saving mode. By 
      returning 0 we prevent both those things from happening. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_SYSCOMMAND:						<FONT color=#ffffaa>// Intercept System Commands</FONT>
		{
			switch (wParam)						<FONT color=#ffffaa>// Check System Calls</FONT>
			{
				case SC_SCREENSAVE:				<FONT color=#ffffaa>// Screensaver Trying To Start?</FONT>
				case SC_MONITORPOWER:				<FONT color=#ffffaa>// Monitor Trying To Enter Powersave?</FONT>
				return 0;					<FONT color=#ffffaa>// Prevent From Happening</FONT>
			}
			break;							<FONT color=#ffffaa>// Exit</FONT>
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If <B>uMsg</B> is WM_CLOSE the 
      window has been closed. We send out a quit message that the main loop will 
      intercept. The variable <B>done</B> will be set to TRUE, the main loop in 
      WinMain() will stop, and the program will close. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_CLOSE:							<FONT color=#ffffaa>// Did We Receive A Close Message?</FONT>
		{
			PostQuitMessage(0);					<FONT color=#ffffaa>// Send A Quit Message</FONT>
			return 0;						<FONT color=#ffffaa>// Jump Back</FONT>
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If a key is being held down we can 
      find out what key it is by reading <B>wParam</B>. I then make that keys 
      cell in the array <B>keys[]</B> become TRUE. That way I can read the array 
      later on and find out which keys are being held down. This allows more 
      than one key to be pressed at the same time. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_KEYDOWN:						<FONT color=#ffffaa>// Is A Key Being Held Down?</FONT>
		{
			keys[wParam] = TRUE;					<FONT color=#ffffaa>// If So, Mark It As TRUE</FONT>
			return 0;						<FONT color=#ffffaa>// Jump Back</FONT>
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If a key has been released we find 
      out which key it was by reading <B>wParam</B>. We then make that keys cell 
      in the array <B>keys[]</B> equal FALSE. That way when I read the cell for 
      that key I'll know if it's still being held down or if it's been released. 
      Each key on the keyboard can be represented by a number from 0-255. When I 
      press the key that represents the number 40 for example, <B>keys[40]</B> 
      will become TRUE. When I let go, it will become FALSE. This is how we use 
      cells to store keypresses. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_KEYUP:							<FONT color=#ffffaa>// Has A Key Been Released?</FONT>
		{
			keys[wParam] = FALSE;					<FONT color=#ffffaa>// If So, Mark It As FALSE</FONT>
			return 0;						<FONT color=#ffffaa>// Jump Back</FONT>
		}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Whenever we resize our window 
      <B>uMsg</B> will eventually become the message WM_SIZE. We read the LOWORD 
      and HIWORD values of <B>lParam</B> to find out the windows new width and 
      height. We pass the new width and height to ReSizeGLScene(). The OpenGL 
      Scene is then resized to the new width and height. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		case WM_SIZE:							<FONT color=#ffffaa>// Resize The OpenGL Window</FONT>
		{
			ReSizeGLScene(LOWORD(lParam),HIWORD(lParam));		<FONT color=#ffffaa>// LoWord=Width, HiWord=Height</FONT>
			return 0;						<FONT color=#ffffaa>// Jump Back</FONT>
		}
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">Any messages that we don't care 
      about will be passed to DefWindowProc so that Windows can deal with them. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	<FONT color=#ffffaa>// Pass All Unhandled Messages To DefWindowProc</FONT>
	return DefWindowProc(hWnd,uMsg,wParam,lParam);
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This is the entry point of our 
      Windows Application. This is where we call our window creation routine, 
      deal with window messages, and watch for human interaction. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>int WINAPI WinMain(	HINSTANCE	hInstance,				<FONT color=#ffffaa>// Instance</FONT>
			HINSTANCE	hPrevInstance,				<FONT color=#ffffaa>// Previous Instance</FONT>
			LPSTR		lpCmdLine,				<FONT color=#ffffaa>// Command Line Parameters</FONT>
			int		nCmdShow)				<FONT color=#ffffaa>// Window Show State</FONT>
{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">We set up two variables. 
      <B>msg</B> will be used to check if there are any waiting messages that 
      need to be dealt with. the variable <B>done</B> starts out being FALSE. 
      This means our program is not done running. As long as <B>done</B> remains 
      FALSE, the program will continue to run. As soon as <B>done</B> is changed 
      from FALSE to TRUE, our program will quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	MSG	msg;								<FONT color=#ffffaa>// Windows Message Structure</FONT>
	BOOL	done=FALSE;							<FONT color=#ffffaa>// Bool Variable To Exit Loop</FONT>
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This section of code is completely 
      optional. It pops up a messagebox that asks if you would like to run the 
      program in fullscreen mode. If the user clicks on the NO button, the 
      variable <B>fullscreen</B> changes from TRUE (it's default) to FALSE and 
      the program runs in windowed mode instead of fullscreen mode. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	<FONT color=#ffffaa>// Ask The User Which Screen Mode They Prefer</FONT>
	if (MessageBox(NULL,"Would You Like To Run In Fullscreen Mode?", "Start FullScreen?",MB_YESNO|MB_ICONQUESTION)==IDNO)
	{
		fullscreen=FALSE;						<FONT color=#ffffaa>// Windowed Mode</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This is how we create our OpenGL 
      window. We pass the title, the width, the height, the color depth, and 
      TRUE (fullscreen) or FALSE (window mode) to CreateGLWindow. That's it! I'm 
      pretty happy with the simplicity of this code. If the window was not 
      created for some reason, FALSE will be returned and our program will 
      immediately quit (return 0). </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	<FONT color=#ffffaa>// Create Our OpenGL Window</FONT>
	if (!CreateGLWindow("NeHe's OpenGL Framework",640,480,16,fullscreen))
	{
		return 0;							<FONT color=#ffffaa>// Quit If Window Was Not Created</FONT>
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">This is the start of our loop. As 
      long as <B>done</B> equals FALSE the loop will keep repeating. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	while(!done)								<FONT color=#ffffaa>// Loop That Runs Until done=TRUE</FONT>
	{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The first thing we have to do is 
      check to see if any window messages are waiting. By using PeekMessage() we 
      can check for messages without halting our program. A lot of programs use 
      GetMessage(). It works fine, but with GetMessage() your program doesn't do 
      anything until it receives a paint message or some other window message. 
      </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>		if (PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE))			<FONT color=#ffffaa>// Is There A Message Waiting?</FONT>
		{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In the next section of code we 
      check to see if a quit message was issued. If the current message is a 
      WM_QUIT message caused by PostQuitMessage(0) the variable <B>done</B> is 
      set to TRUE, causing the program to quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			if (msg.message==WM_QUIT)				<FONT color=#ffffaa>// Have We Received A Quit Message?</FONT>
			{
				done=TRUE;					<FONT color=#ffffaa>// If So done=TRUE</FONT>
			}
			else							<FONT color=#ffffaa>// If Not, Deal With Window Messages</FONT>
			{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the message isn't a quit 
      message we translate the message then dispatch the message so that 
      WndProc() or Windows can deal with it. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>				TranslateMessage(&amp;msg);				<FONT color=#ffffaa>// Translate The Message</FONT>
				DispatchMessage(&amp;msg);				<FONT color=#ffffaa>// Dispatch The Message</FONT>
			}
		}
		else								<FONT color=#ffffaa>// If There Are No Messages</FONT>
		{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If there were no messages we'll 
      draw our OpenGL scene. The first line of code below checks to see if the 
      window is active. If the ESC key is pressed the variable <B>done</B> is 
      set to TRUE, causing the program to quit. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			<FONT color=#ffffaa>// Draw The Scene.  Watch For ESC Key And Quit Messages From DrawGLScene()</FONT>
			if (active)						<FONT color=#ffffaa>// Program Active?</FONT>
			{
				if (keys[VK_ESCAPE])				<FONT color=#ffffaa>// Was ESC Pressed?</FONT>
				{
					done=TRUE;				<FONT color=#ffffaa>// ESC Signalled A Quit</FONT>
				}
				else						<FONT color=#ffffaa>// Not Time To Quit, Update Screen</FONT>
				{
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the program is active and esc 
      was not pressed we render the scene and swap the buffer (By using double 
      buffering we get smooth flicker free animation). By using double 
      buffering, we are drawing everything to a hidden screen that we can not 
      see. When we swap the buffer, the screen we see becomes the hidden screen, 
      and the screen that was hidden becomes visible. This way we don't see our 
      scene being drawn out. It just instantly appears. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>					DrawGLScene();				<FONT color=#ffffaa>// Draw The Scene</FONT>
					SwapBuffers(hDC);			<FONT color=#ffffaa>// Swap Buffers (Double Buffering)</FONT>
				}
			}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">The next bit of code is new and 
      has been added just recently (05-01-00). It allows us to press the F1 key 
      to switch from fullscreen mode to windowed mode or windowed mode to 
      fullscreen mode. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>			if (keys[VK_F1])					<FONT color=#ffffaa>// Is F1 Being Pressed?</FONT>
			{
				keys[VK_F1]=FALSE;				<FONT color=#ffffaa>// If So Make Key FALSE</FONT>
				KillGLWindow();					<FONT color=#ffffaa>// Kill Our Current Window</FONT>
				fullscreen=!fullscreen;				<FONT color=#ffffaa>// Toggle Fullscreen / Windowed Mode</FONT>
				<FONT color=#ffffaa>// Recreate Our OpenGL Window</FONT>
				if (!CreateGLWindow("NeHe's OpenGL Framework",640,480,16,fullscreen))
				{
					return 0;				<FONT color=#ffffaa>// Quit If Window Was Not Created</FONT>
				}
			}
		}
	}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">If the <B>done</B> variable is no 
      longer FALSE, the program quits. We kill the OpenGL window properly so 
      that everything is freed up, and we exit the program. </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Border -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><FONT color=#aaffaa><PRE>	<FONT color=#ffffaa>// Shutdown</FONT>
	KillGLWindow();								<FONT color=#ffffaa>// Kill The Window</FONT>
	return (msg.wParam);							<FONT color=#ffffaa>// Exit The Program</FONT>
}
</PRE></FONT><!-- Top Border -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tl.png">&nbsp;</TD>
    <TD width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tc.png">&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/tr.png">&nbsp;</TD><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms">In this tutorial I have tried to 
      explain in as much detail, every step involved in setting up, and creating 
      a fullscreen OpenGL program of your own, that will exit when the ESC key 
      is pressed and monitor if the window is active or not. I've spent roughly 
      2 weeks writing the code, one week fixing bugs &amp; talking with 
      programming gurus, and 2 days (roughly 22 hours writing this HTML file). 
      If you have comments or questions please email me. If you feel I have 
      incorrectly commented something or that the code could be done better in 
      some sections, please let me know. I want to make the best OpenGL 
      tutorials I can and I'm interested in hearing your feedback. <BR><BR><FONT 
      color=#aaccff><B>Jeff Molofee</B> (<B>NeHe</B>)</FONT> <BR><BR>* DOWNLOAD 
      <A href="http://nehe.gamedev.net/tutorials/vc/lesson01.zip">Visual C++</A> 
      Code For This Lesson.<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/borland/lesson01.zip">Borland 
      C++</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:matstar@alphalink.com.au">Mat Szorenyi</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/cygwin/lesson01.tar.gz">Cygwin (<A 
      href="http://www.cygwin.com/">FREE Language</A>)</A> Code For This Lesson. 
      ( Conversion by <A href="mailto:stephan@lazyfellow.com">Stephan 
      Ferraro</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/vb/lesson01.zip">Visual Basic</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:rosscogl@email.com">Ross Dawson</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/macosx/lesson01.sit.bin">MacOS 
      X/GLUT</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:unreality@mac.com">Raal Goff</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/linuxglx/lesson01.tar.gz">Linux/GLX</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:Mihael.Vrbanec@stud.uni-karlsruhe.de">Mihael Vrbanec</A> 
      )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/delphi/lesson01-2.zip">Delphi</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:nelsonnelson@hotmail.com">Nelson Nelson</A> )<BR>* DOWNLOAD 
      <A href="http://nehe.gamedev.net/tutorials/cwarrior/lesson01.zip">Code 
      Warrior 5</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:rounds@cs.und.edu">Erik Rounds</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/delphi/lesson01.zip">Delphi</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:Perry.dj@glo.be">Peter De Jaegher</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/masm/lesson01.zip">MASM</A> Code 
      For This Lesson. ( Conversion by <A href="mailto:scalp@bigfoot.com">Nico 
      (Scalp)</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/asm/lesson01.zip">ASM</A> Code For 
      This Lesson. ( Conversion by <A 
      href="mailto:foolman@bigfoot.com">Foolman</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/vfortran/lesson01.zip">Visual 
      Fortran</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:Jean-Philippe.Perois@wanadoo.fr">Jean-Philippe Perois</A> 
      )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/linux/lesson01.tar.gz">Linux</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:ulmont@bellsouth.net">Richard Campbell</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/irix/lesson01.zip">Irix</A> Code 
      For This Lesson. ( Conversion by <A 
      href="mailto:lakmal@gunasekara.de">Lakmal Gunasekara</A> )<BR>* DOWNLOAD 
      <A 
      href="http://nehe.gamedev.net/tutorials/solaris/lesson01.zip">Solaris</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:lakmal@gunasekara.de">Lakmal Gunasekara</A> )<BR>* DOWNLOAD 
      <A href="http://nehe.gamedev.net/tutorials/mac/lesson01.sit">Mac OS</A> 
      Code For This Lesson. ( Conversion by <A href="mailto:asp@usc.edu">Anthony 
      Parker</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/pbasic/lesson01.zip">Power 
      Basic</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:anguslaw@net.ntl.com">Angus Law</A> )<BR>* DOWNLOAD <A 
      target=_blank 
      href="http://www.ngent.com/staff/chrish/opengl/index.html">BeOS</A> Code 
      For This Lesson. ( Conversion by <A href="mailto:chrish@ngent.com">Chris 
      Herborth</A> )<BR>* DOWNLOAD <A target=_blank 
      href="http://dev.knowledgeassociates.com/hodglim/nehe/nehe.shtml">Java</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:Hodglim@hotmail.com">Darren Hodges</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/cbuilder/lesson01.zip">Borland C++ 
      Builder 4.0</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:psalmons@helios.acomp.usf.edu">Patrick Salmons</A> )<BR>* 
      DOWNLOAD <A href="http://sites.netscape.net/zaqhaq/">MingW32 &amp; 
      Allegro</A> Code For This Lesson. ( Conversion by <A 
      href="mailto:zaqhaq@netscape.net">Peter Puck</A> )<BR>* DOWNLOAD <A 
      href="http://nehe.gamedev.net/tutorials/python/lesson01.gz">Python</A> 
      Code For This Lesson. ( Conversion by <A 
      href="mailto:hakuin@voicenet.com">John</A> ) </FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR><!-- Bottom Divider -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/Lc.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/c.png" 
      height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/Rc.png" 
    height=28>&nbsp;</TD></TR><!-- Border Edges & Content -->
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/l.png">&nbsp;</TD>
    <TD vAlign=top align=left width="100%"><FONT 
      face="arial,trebuchet ms,comic sans ms"><BR>
      <CENTER><A target=_top href="http://nehe.gamedev.net/"><B><FONT 
      size=+1>Back To NeHe Productions!</FONT></B></A></CENTER></FONT></TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/r.png" 
      height=28>&nbsp;</TD></TR>
  <TR>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bl.png" 
    height=28>&nbsp;</TD>
    <TD vAlign=top width="100%" 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/bc.png" 
    height=28>&nbsp;</TD>
    <TD noWrap width=28 
    background="Jeff Molofee's OpenGL Windows Tutorial #1_files/br.png" 
    height=28>&nbsp;</TD></TR></TBODY></TABLE><BR><BR>
<CENTER><!-- --></CENTER></BODY></HTML>
